{"version":3,"sources":["assets/images/logo.png","api/ajax.js","api/index.js","utils/memoryUtils.js","utils/storageUtils.js","pages/login/login.jsx","config/menuConfig.js","components/left-nav/index.jsx","utils/dateUtils.js","components/link-button/LinkButton.jsx","components/header/index.jsx","pages/admin/pages/home/components/bar.jsx","pages/admin/pages/home/components/line.jsx","pages/admin/pages/home/home.jsx","pages/admin/pages/category/components/addForm.jsx","pages/admin/pages/category/components/updateForm.jsx","pages/admin/pages/category/category.jsx","pages/admin/pages/product/pages/home.jsx","utils/constants.js","pages/admin/pages/product/pages/pictures-wall.jsx","pages/admin/pages/product/pages/rich-text-editor.jsx","pages/admin/pages/product/pages/add-update.jsx","pages/admin/pages/product/pages/detail.jsx","pages/admin/pages/product/product.jsx","pages/admin/pages/role/components/add-form.jsx","pages/admin/pages/role/components/auth-form.jsx","pages/admin/pages/role/role.jsx","pages/admin/pages/user/components/user-form.jsx","pages/admin/pages/user/user.jsx","pages/admin/pages/charts/bar.jsx","pages/admin/pages/charts/line.jsx","pages/admin/pages/charts/pie.jsx","pages/admin/pages/order/order.jsx","pages/admin/pages/not-found/not-found.jsx","pages/admin/admin.jsx","App.js","index.js"],"names":["ajax","url","data","type","Promise","resolve","reject","promise","toUpperCase","axios","get","params","post","then","response","catch","error","message","reqLogin","username","password","BASE","reqWeather","jsonp","err","city","wea","tem","weather","temperature","reqCategoryList","parentId","reqAddCategory","categoryName","reqUpdateCategory","categoryId","reqCategory","reqProductList","pageNum","pageSize","reqSearchProductList","searchType","searchName","reqUpdateStatus","productId","status","reqDeleteImg","name","reqAddUpdateProduct","product","_id","reqAddRole","roleName","reqUpdateRole","role","reqUserList","reqDeleteUser","userId","reqAddOrUpdateUser","user","USER_KEY","store","set","remove","Item","Login","handleSubmit","event","preventDefault","props","form","validateFields","values","a","result","success","memoryUtils","storageUtils","history","replace","msg","console","this","validatePwd","rule","value","callback","length","test","to","getFieldDecorator","className","src","logo","alt","onSubmit","rules","required","whitespace","min","max","pattern","initialValue","prefix","style","color","placeholder","validator","href","htmlType","Component","WrapLogin","create","menuList","title","key","icon","isPublic","children","SubMenu","LeftNav","hasAuth","item","menus","indexOf","find","child","getMenuNodes","path","location","pathname","reduce","pre","cItem","openKey","push","menuNodes","mode","theme","selectedKeys","defaultOpenKeys","withRouter","formatDate","time","date","Date","getFullYear","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","LinkButton","Header","state","currentTime","now","dayPictureUrl","getTime","intervalId","setInterval","setState","getWeather","getTitle","forEach","logout","confirm","onOk","onCancel","clearInterval","onClick","Bar","saleData","month","sales","visitData","isVisited","width","height","autoFit","position","shared","LineGraph","scale","formatter","v","London","Tokyo","float","marginRight","backgroundColor","padding","interactions","shape","label","showCrosshairs","background","fill","stroke","RangePicker","dateFormat","Home","handleChange","contentTitle","contentExtra","defaultValue","moment","format","extra","valueStyle","fontWeight","suffix","fontSize","marginLeft","bodyStyle","Option","AddForm","setForm","categoryList","labelCol","span","wrapperCol","map","UpdateForm","Category","loading","subCategoryList","parentName","showStatus","initColumns","columns","dataIndex","render","category","showUpdateCategory","showSubCategoryList","getCategoryList","showCategoryList","showAddCategory","addCategory","addForm","log","resetFields","handleAddCancel","updateCategory","updateForm","handleUpdateCancel","bordered","rowKey","dataSource","pagination","defaultPageSize","defaultCurrent","showSizeChanger","pageSizeOptions","showQuickJumper","visible","ProductHome","productList","total","price","newStatus","display","updateStatus","showDetail","showUpdate","getProductList","list","onChange","margin","target","current","onShowSizeChange","BASE_IMG_URL","getBase64","file","reader","FileReader","readAsDataURL","onload","onerror","PicturesWall","handleCancel","previewVisible","handlePreview","preview","originFileObj","previewImage","fileList","getImgList","imgs","img","index","uid","uploadButton","action","accept","listType","onPreview","footer","RichTextEditor","onEditorStateChange","editorState","uploadImageCallBack","xhr","XMLHttpRequest","open","FormData","append","send","addEventListener","JSON","parse","responseText","link","getDetail","draftToHtml","convertToRaw","getCurrentContent","html","detail","contentBlock","htmlToDraft","contentState","ContentState","createFromBlockArray","contentBlocks","EditorState","createWithContent","createEmpty","editorStyle","border","minHeight","toolbar","image","uploadCallback","present","mandatory","propsType","PropTypes","string","TextArea","ProductAddUpdate","options","validatePrice","initOptions","isLeaf","isUpdate","pCategoryId","childrenOptions","option","loadData","selectedOptions","targetOption","submit","desc","categoryIds","pw","editor","goBack","React","createRef","autosize","minRows","maxRows","addonAfter","ref","offset","ProductDetail","cName1","cName2","all","results","dangerouslySetInnerHTML","__html","Product","exact","component","TreeNode","AuthForm","getTreeNodes","onCheck","checkedKeys","getMenus","treeNodes","nextProps","nextContext","disabled","checkable","defaultExpandAll","Role","roles","isShowAdd","isShowAuth","getRoleList","onRow","addRole","updateRole","auth","auth_time","auth_name","role_id","rowSelection","selectedRowKeys","onSelect","UserForm","phone","email","PureComponent","User","users","isShow","roleNames","deleteUser","getUserList","initRoleNames","showAdd","addOrUpdateUser","stores","updateData","sale","getOption","text","tooltip","legend","xAxis","yAxis","series","paddingTop","Line","update","Pie","subtext","x","trigger","orient","left","radius","center","itemStyle","emphasis","shadowBlur","shadowOffsetX","shadowColor","getOption2","top","textStyle","visualMap","show","inRange","colorLightness","sort","b","roseType","normal","labelLine","lineStyle","smooth","length2","animationType","animationEasing","animationDelay","idx","Math","random","Order","NotFound","goHome","Footer","Sider","Content","Admin","from","textAlign","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.101f6d2b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.f6487143.png\";","/**\r\n * 能发送异步ajax请求的函数模块\r\n     封装axios库\r\n     函数的返回值是promise对象\r\n\r\n   axios.get()/post()返回的就是 promise 对象\r\n   1.优化1: 统一处理请求异常?\r\n     在外层包一个自己创建的promise对象\r\n     在请求出错时, 不reject(error), 而是显示错误提示\r\n   2.优化2: 异步得到不是response, 而是response.data\r\n     在请求成功resolve时: resolve(response.data)\r\n */\r\n\r\nimport axios from 'axios'\r\nimport { message } from 'antd'\r\n\r\nexport default function ajax(url, data={}, type='GET') {\r\n    /*\r\n    if(type.toUpperCase() === 'GET') { // 发GET请求\r\n         return axios.get(url, { // 配置对象\r\n            params: data  // params配置指定的是query参数\r\n        })\r\n    } else if(type.toUpperCase() === 'POST') { // 发POST请求\r\n        return axios.post(url, data)\r\n    }\r\n    */\r\n\r\n\r\n    // 优化后\r\n    return new Promise((resolve, reject)=>{\r\n        let promise\r\n\r\n        // 1. 执行异步ajax请求\r\n        if(type.toUpperCase() === 'GET') { // 发GET请求\r\n            promise = axios.get(url, { // 配置对象\r\n                params: data  // params 配置指定的是 query 参数\r\n            })\r\n        } else if(type.toUpperCase() === 'POST') { // 发POST请求\r\n            promise = axios.post(url, data)\r\n        }\r\n\r\n        // 2. 如果成功了, 调用resolve(value)\r\n        promise.then(response=>{\r\n            resolve(response.data)\r\n\r\n        // 3. 如果失败了, 不调用reject(reason), 而是提示异常信息\r\n        }).catch(error=>{  // 对所有 ajax 请求出错做统一处理, 外层就不用再处理错误了\r\n            // reject(error)\r\n            message.error('请求出错了: ' + error.message)\r\n        })\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","/**\r\n * 包含应用中所有接口请求函数的模块\r\n * 每个函数的返回值都是promise\r\n * 基本要求: 能根据接口文档定义接口请求函数\r\n */\r\n\r\nimport ajax from './ajax'\r\nimport jsonp from 'jsonp'\r\nimport {message} from 'antd'\r\n\r\n// const BASE = 'http://localhost:5000'\r\nconst BASE = '/api'  // 在package.json中配置了代理: \"proxy\": \"http://localhost:5000\"\r\n\r\n// 1.请求登陆接口\r\n// export function reqLogin(username, password) {\r\n//   return ajax('/login', {username, password}, 'POST')\r\n// }\r\nexport const reqLogin = (username, password)=>{\r\n    return ajax(BASE+'/login', {username, password}, 'POST')\r\n}\r\n\r\n// 2.获取天气\r\nexport const reqWeather = ()=>{  // jsonp请求的接口请求函数\r\n    return new Promise(((resolve, reject) => {\r\n        // const url = `http://api.k780.com/?app=weather.today&weaId=1&appkey=10003&sign=b59bc3ef6191eb9f747dd4e83c99f2a4&format=json`  // 此接口不能使用jsonp\r\n        const url = `https://tianqiapi.com/api?version=v1&appid=41741935&appsecret=1WCZkBa7`  // 实况天气接口\r\n\r\n        // 发送jsonp请求\r\n        jsonp(url, {}, (err, data)=>{\r\n            // console.log('jsonp()', err, data)\r\n            if(!err) {  // 如果成功了\r\n                const city = data.city\r\n                const { wea, tem } = data.data[0]\r\n                // console.log(weather)\r\n                resolve({city, weather:wea, temperature: tem})\r\n            } else {  // 如果失败了\r\n                message.error('获取天气信息失败!')\r\n            }\r\n        })\r\n    }))\r\n}\r\n\r\n\r\n// 3.获取一级/二级分类的列表\r\nexport const reqCategoryList = (parentId)=>ajax(BASE + '/manage/category/list', {parentId}, 'GET')\r\n\r\n// 4.添加分类\r\nexport const reqAddCategory = (parentId, categoryName)=>ajax(BASE + '/manage/category/add', {parentId, categoryName}, 'POST')\r\n\r\n// 5.更新分类\r\nexport const reqUpdateCategory = ({categoryId, categoryName})=>ajax(BASE + '/manage/category/update', {categoryId, categoryName}, 'POST')\r\n\r\n// 6.获取一个分类\r\nexport const reqCategory = (categoryId)=>ajax(BASE + '/manage/category/info', {categoryId}, 'GET')\r\n\r\n// 7.获取商品分页列表\r\nexport const reqProductList = (pageNum, pageSize)=>ajax(BASE+'/manage/product/list', {pageNum, pageSize}, 'GET')\r\n\r\n// 8.搜索商品分页列表 (根据商品名称/商品描述) => searchType: 搜索的类型, productName/productDesc\r\nexport const reqSearchProductList = ({pageNum, pageSize, searchType, searchName})=>ajax(BASE+'/manage/product/search', {\r\n    pageNum,\r\n    pageSize,\r\n    [searchType]: searchName\r\n}, 'GET')\r\n\r\n\r\n// 9.对商品进行上架/下架处理\r\nexport const reqUpdateStatus = (productId, status)=>ajax(BASE+'/manage/product/updateStatus', {productId, status}, 'POST')\r\n\r\n// 10.删除指定名称的图片\r\nexport const reqDeleteImg = (name)=>ajax(BASE+'/manage/img/delete', {name}, 'POST')\r\n\r\n// 11.添加/修改商品\r\n/*\r\nexport const reqAddProduct = (product)=>ajax(BASE+'/manage/product/add', product, 'POST')\r\nexport const reqUpdateProduct = (product)=>ajax(BASE+'/manage/product/update', product, 'POST')\r\n*/\r\nexport const reqAddUpdateProduct = (product)=>ajax(BASE+'/manage/product/'+(product._id ? 'update' : 'add'), product, 'POST')\r\n\r\n\r\n// 12.获取所有角色的列表\r\nexport const reqRoleList = ()=>ajax(BASE+'/manage/role/list', {}, 'GET')\r\n\r\n// 13.添加角色\r\nexport const reqAddRole = (roleName)=>ajax(BASE+'/manage/role/add', {roleName}, 'POST')\r\n\r\n// 14.更新角色(给角色设置权限)\r\nexport const reqUpdateRole = (role)=>ajax(BASE+'/manage/role/update', role, 'POST')\r\n\r\n\r\n// 15.获取所有用户的列表\r\nexport const reqUserList = ()=>ajax(BASE+'/manage/user/list', {}, 'GET')\r\n\r\n// 16.删除指定用户\r\nexport const reqDeleteUser = (userId)=>ajax(BASE+'/manage/user/delete', {userId}, 'POST')\r\n\r\n// 17.添加/更新用户\r\n// export const reqAddUser = user=>ajax(BASE+'/manage/user/add', user, 'POST')\r\nexport const reqAddOrUpdateUser= (user)=>ajax(BASE+'/manage/user/'+(user._id ? 'update' : 'add'), user, 'POST')\r\n\r\n\r\n\r\n\r\n// reqWeather()\r\n\r\n/*\r\njsonp解决ajax跨域的原理\r\n  1). jsonp只能解决GET类型的ajax请求跨域问题\r\n  2). jsonp请求不是ajax请求, 而是一般的get请求\r\n  3). 基本原理\r\n   浏览器端:\r\n      动态生成<script>来请求后台接口(src就是接口的url)\r\n      定义好用于接收响应数据的函数(fn), 并将函数名通过请求参数提交给后台(如: callback=fn)\r\n   服务器端:\r\n      接收到请求处理产生结果数据后, 返回一个函数调用的js代码, 并将结果数据作为实参传入函数调用\r\n   浏览器端:\r\n      收到响应自动执行函数调用的js代码, 也就执行了提前定义好的回调函数, 并得到了需要的结果数据\r\n */\r\n","/**\r\n * 用来在内存保存一些数据的工具模块\r\n */\r\n// eslint-disable-next-line\r\nexport default {\r\n    user: {},  // 保存当前登陆的user\r\n    product: {}  // 指定的商品对象\r\n}\r\n","/**\r\n * 进行local数据存储管理的工具模块\r\n */\r\nimport store from 'store'\r\nconst USER_KEY = 'user_key'\r\n\r\n// eslint-disable-next-line\r\nexport default {\r\n    /*\r\n    //原生的localStorage的相关用法\r\n    // 保存user\r\n    saveUser(user) {\r\n        localStorage.setItem(USER_KEY, JSON.stringify(user))\r\n    },\r\n\r\n    // 读取user\r\n    getUser() {\r\n        return JSON.parse(localStorage.getItem(USER_KEY) || '{}')\r\n    },\r\n\r\n    // 删除user\r\n    removeUser() {\r\n        localStorage.removeItem(USER_KEY)\r\n    }\r\n    */\r\n\r\n\r\n    // 采用第三方库store, 考虑了兼容性\r\n    // 保存user\r\n    saveUser(user) {\r\n        store.set(USER_KEY, user)\r\n    },\r\n\r\n    // 读取user\r\n    getUser() {\r\n        return store.get(USER_KEY) || {}\r\n    },\r\n\r\n    // 删除user\r\n    removeUser() {\r\n        store.remove(USER_KEY)\r\n    }\r\n\r\n}\r\n","/**\r\n * 登录的路由组件\r\n */\r\nimport React, {Component} from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { Form, Icon, Input, Button, Checkbox, message } from 'antd'\r\nimport './login.less'\r\nimport logo from '../../assets/images/logo.png'\r\n\r\nimport { reqLogin } from '../../api'\r\nimport memoryUtils from '../../utils/memoryUtils'\r\nimport storageUtils from '../../utils/storageUtils'\r\n\r\nconst Item = Form.Item // 不能写在import之前\r\n\r\nclass Login extends Component {\r\n\r\n    // 表单提交事件\r\n    handleSubmit = (event)=>{\r\n        event.preventDefault()  // 阻止事件的默认行为\r\n        // const form = this.props.form  // 得到具强大功能的form对象\r\n        // const values = form.getFieldsValue()  // 手动获取表单项的输入数据\r\n        // console.log('handleSubmit()', values)\r\n\r\n        this.props.form.validateFields( async (err, values)=>{  // 对所有表单字段进行统一验证\r\n            if(!err) {  // 检验成功\r\n                // console.log('提交登陆的ajax请求', values)\r\n                const { username, password } = values\r\n\r\n                /*reqLogin(username, password).then(response=>{\r\n                    console.warn(response)\r\n                }).catch(error=>{})*/\r\n\r\n                // ajax未进行优化时\r\n                /*try {\r\n                    const result = await reqLogin(username, password)\r\n                    console.log(result)\r\n                } catch (error){\r\n                    console.error('请求出错了', error)\r\n                }*/\r\n\r\n                // ajax进行了优化\r\n                const result = await reqLogin(username, password)  // {status: 0, data:{}}  {status: 1, msg: 'xxx'}\r\n                // console.log(result)\r\n                if(result.status === 0) {\r\n                    message.success('登陆成功')  // 提示登陆成功\r\n\r\n                    const user = result.data\r\n                    memoryUtils.user = user  // 保存在内存中\r\n                    storageUtils.saveUser(user)  // 保存到localStorage中\r\n\r\n                    this.props.history.replace('/')  // 跳转到管理界面 (不需要再回退回到登陆)\r\n                } else {\r\n                    message.error(result.msg)  // 提示错误信息\r\n                }\r\n\r\n            } else {\r\n                console.error('检验失败!!!')\r\n            }\r\n        })\r\n    }\r\n\r\n    // 对密码进行自定义验证\r\n    validatePwd = (rule, value, callback)=>{\r\n        // console.log('validatePwd()', rule, value)\r\n        if(!value) {\r\n            callback('密码不能为空')  // callback('xxx') 验证失败, 并指定提示的文本\r\n        } else if(value.length<4) {\r\n            callback('密码长度不能小于4位')\r\n        } else if(value.length>12) {\r\n            callback('密码长度不能大于12位')\r\n        } else if(!/^[a-zA-Z0-9_]+$/.test(value)) {  // 等价于 !value.match(/^[0-9a-zA-Z_]+$/)\r\n            callback('密码必须是英文、数字或下划线组成')\r\n        } else {\r\n            callback() // 验证通过\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const user = memoryUtils.user\r\n        if(user && user._id) {  // 如果用户已经登陆, 自动跳转到管理界面\r\n            return <Redirect to='/'/>\r\n        }\r\n\r\n        const form = this.props.form  // 得到具强大功能的form对象\r\n        const { getFieldDecorator } = form\r\n\r\n        return (\r\n            <div className=\"login\">\r\n                <header className=\"login-header\">\r\n                    <img src={logo} alt=\"logo\"/>\r\n                    <h1>React项目: 后台管理系统</h1>\r\n                </header>\r\n                <section className=\"login-content\">\r\n                    <h2>用户登录</h2>\r\n                    <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n                        <Item>\r\n                            {\r\n                                getFieldDecorator('username', { // (标识名称, 配置对象)  配置对象:属性名是特定的一些名称\r\n                                    rules: [\r\n                                        { required: true, whitespace: true, message: '用户名不能为空' },\r\n                                        { min: 4, message: '用户名至少4位' },   // 声明式验证: 直接使用别人定义好的验证规则进行验证\r\n                                        { max: 12, message: '用户名最多12位' },\r\n                                        { pattern: /^[a-zA-Z0-9_]+$/, message: '用户名必须是英文、数字或下划线组成' },\r\n                                    ],\r\n                                    initialValue: 'admin' // 初始值\r\n                                })(\r\n                                    <Input prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                                           placeholder=\"用户名\" />\r\n                                )\r\n                            }\r\n                        </Item>\r\n                        <Form.Item>\r\n                            {\r\n                                getFieldDecorator('password', {\r\n                                    rules: [\r\n                                        {\r\n                                            validator: this.validatePwd\r\n                                        }\r\n                                    ]\r\n                                })(\r\n                                    <Input prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                                           type=\"password\" placeholder=\"密码\"/>\r\n                                )\r\n                            }\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Checkbox>记住我</Checkbox>\r\n                            <a className=\"login-form-forgot\" href=\"/login\">忘记密码</a>\r\n                            <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">登录</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst WrapLogin = Form.create()(Login)  // 包装Form组件生成一个新的组件:Form(Login), 新组件会向Form组件传递一个强大的对象属性: form\r\nexport default WrapLogin\r\n\r\n/*\r\n1. 高阶函数\r\n    1). 一类特别的函数(两种情况)\r\n        a. 接受函数类型的参数\r\n        b. 返回值是函数\r\n    2). 常见\r\n        a. 定时器: setTimeout()/setInterval()\r\n        b. Promise: Promise(() => {}) then(value => {}, reason => {})\r\n        c. 数组遍历相关的方法: forEach()/filter()/map()/reduce()/find()/findIndex()\r\n        d. 函数对象的bind()\r\n        e. Form.create()() / getFieldDecorator()()\r\n    3). 高阶函数更新动态, 更加具有扩展性\r\n\r\n2. 高阶组件\r\n    1). 本质就是一个函数\r\n    2). 接收一个组件(被包装组件), 返回一个新的组件(包装组件), 包装组件会向被包装组件传入特定属性\r\n    3). 作用: 扩展组件的功能\r\n    4). 高阶组件也是高阶函数: 接收一个组件函数, 返回是一个新的组件函数\r\n\r\nasync和await\r\n    1. 作用?\r\n       简化promise对象的使用: 不用再使用then()来指定成功/失败的回调函数\r\n       以同步编码(没有回调函数了)方式实现异步流程\r\n    2. 哪里写await?\r\n        在返回promise的表达式左侧写await: 不想要promise, 想要promise异步执行的成功的value数据\r\n    3. 哪里写async?\r\n        await所在函数(最近的)定义的左侧写async\r\n */\r\n\r\n/*\r\n1.前台表单验证\r\n    用户名/密码的的合法性要求\r\n        1). 必须输入\r\n        2). 必须大于等于4位\r\n        3). 必须小于等于12位\r\n        4). 必须是英文、数字或下划线组成\r\n2.收集表单输入数据\r\n\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n","const menuList = [\r\n  {\r\n    title: '首页', // 菜单标题名称\r\n    key: '/home', // 对应的path\r\n    icon: 'home', // 图标名称\r\n    isPublic: true, // 公开的\r\n  },\r\n  {\r\n    title: '商品',\r\n    key: '/products',\r\n    icon: 'appstore',\r\n    children: [ // 子菜单列表\r\n      {\r\n        title: '品类管理',\r\n        key: '/category',\r\n        icon: 'bars'\r\n      },\r\n      {\r\n        title: '商品管理',\r\n        key: '/product',\r\n        icon: 'tool'\r\n      },\r\n    ]\r\n  },\r\n\r\n  {\r\n    title: '用户管理',\r\n    key: '/user',\r\n    icon: 'user'\r\n  },\r\n  {\r\n    title: '角色管理',\r\n    key: '/role',\r\n    icon: 'safety',\r\n  },\r\n\r\n  {\r\n    title: '图形图表',\r\n    key: '/charts',\r\n    icon: 'area-chart',\r\n    children: [\r\n      {\r\n        title: '柱形图',\r\n        key: '/charts/bar',\r\n        icon: 'bar-chart'\r\n      },\r\n      {\r\n        title: '折线图',\r\n        key: '/charts/line',\r\n        icon: 'line-chart'\r\n      },\r\n      {\r\n        title: '饼图',\r\n        key: '/charts/pie',\r\n        icon: 'pie-chart'\r\n      },\r\n    ]\r\n  },\r\n\r\n  {\r\n    title: '订单管理',\r\n    key: '/order',\r\n    icon: 'windows',\r\n  },\r\n]\r\n\r\nexport default menuList","/**\r\n * 左侧导航的组件\r\n */\r\nimport React, {Component} from 'react'\r\nimport { Link, withRouter } from 'react-router-dom'\r\nimport { Menu, Icon } from 'antd'\r\nimport menuList from '../../config/menuConfig'\r\nimport logo from '../../assets/images/logo.png'\r\nimport './index.less'\r\nimport memoryUtils from '../../utils/memoryUtils'\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nclass LeftNav extends Component {\r\n\r\n    /**\r\n     * 判断当前登陆用户对item是否有权限, 有四种情况：\r\n     *   1.如果当前用户是admin\r\n     *   2.如果当前item是公开的\r\n     *   3.当前用户有此item的权限(即key在menus中)\r\n     *   4.如果当前用户有此item的某个子item的权限\r\n     */\r\n    hasAuth = (item)=>{\r\n        const { key, isPublic } = item\r\n        const menus = memoryUtils.user.role.menus  // 当前用户的权限列表\r\n        const username = memoryUtils.user.username // 当前用户的用户名\r\n        if(username==='admin' || isPublic || menus.indexOf(key)!==-1) {\r\n            return true\r\n        } else if(item.children) {\r\n            return !!item.children.find(child=>menus.indexOf(child.key)!==-1)\r\n        }\r\n        return false\r\n    }\r\n\r\n    // 根据menu的数据数组生成对应的标签数组  使用reduce() + 递归调用\r\n    getMenuNodes = (menuList)=>{\r\n        const path = this.props.location.pathname\r\n        // console.log(path)\r\n\r\n        return menuList.reduce((pre, item)=>{\r\n            // 如果当前用户有item对应的权限, 才需要显示对应的菜单项\r\n            if(this.hasAuth(item)) {\r\n\r\n                if(!item.children) {\r\n                    pre.push((  // 向pre添加<Menu.Item>\r\n                        <Menu.Item key={item.key}>\r\n                            <Link to={item.key}>\r\n                                <Icon type={item.icon} />\r\n                                <span>{item.title}</span>\r\n                            </Link>\r\n                        </Menu.Item>\r\n                    ))\r\n                } else {\r\n                    // const cItem = item.children.find(cItem=>cItem.key===path)  // 查找一个与当前请求路径匹配的子Item\r\n                    const cItem = item.children.find(cItem=>path.indexOf(cItem.key)===0)  // 查找一个是当前请求路径的前缀的子Item\r\n                    if (cItem) {  // 如果存在, 说明当前item的子列表需要打开\r\n                        this.openKey = item.key\r\n                    }\r\n\r\n                    pre.push((  // 向pre添加<SubMenu>\r\n                        <SubMenu key={item.key} title={\r\n                            <span>\r\n                            <Icon type={item.icon} />\r\n                            <span>{item.title}</span>\r\n                        </span>\r\n                        }>\r\n                            {\r\n                                this.getMenuNodes(item.children)\r\n                            }\r\n                        </SubMenu>\r\n                    ))\r\n                }\r\n\r\n            }\r\n            return pre\r\n        }, [])\r\n    }\r\n\r\n    // 在第一次render()之前执行一次, 作用是为第一个render渲染准备数据(必须同步的)\r\n    UNSAFE_componentWillMount() {\r\n        this.menuNodes = this.getMenuNodes(menuList)\r\n        // console.log(this.menuNodes)\r\n    }\r\n\r\n    render() {\r\n        // debugger\r\n        let path = this.props.location.pathname\r\n        // console.log('render()', path)\r\n        if(path.indexOf('/product')===0) { // 当前请求的是商品或其子路由界面\r\n            // 解决进入商品管理详情页/product/detail的时出现商品管理项未选中的情况\r\n            path = '/product'\r\n        }\r\n\r\n        const openKey = this.openKey   // 得到需要打开菜单项的key\r\n        return (\r\n            <div>\r\n                <div className=\"left-nav\">\r\n                    <Link to='/' className=\"left-nav-header\">\r\n                        <img src={logo} alt=\"logo\"/>\r\n                        <h1>后台管理</h1>\r\n                    </Link>\r\n                </div>\r\n                <Menu mode=\"inline\" theme=\"dark\" selectedKeys={[path]} defaultOpenKeys={[openKey]}>\r\n                    {\r\n                        this.menuNodes\r\n                    }\r\n                </Menu>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// LeftNav是非路由组件,要想获得路由组件中的一些属性,需要用withRouter来包装\r\n// withRouter高阶组件:\r\n//    1.包装非路由组件, 返回一个新的组件\r\n//    2.新的组件向非路由组件传递3个属性: history/location/match\r\nexport default withRouter(LeftNav)\r\n\r\n\r\n\r\n\r\n/*\r\nexport default class LeftNav extends Component {\r\n    // 根据menu的数据数组生成对应的标签数组  使用reduce() + 递归调用\r\n    getMenuNodes = (menuList)=>{\r\n        return menuList.reduce((pre, item)=>{\r\n            if(!item.children) {\r\n                pre.push((  // 向pre添加<Menu.Item>\r\n                    <Menu.Item key={item.key}>\r\n                        <Link to={item.key}>\r\n                            <Icon type={item.icon} />\r\n                            <span>{item.title}</span>\r\n                        </Link>\r\n                    </Menu.Item>\r\n                ))\r\n            } else {\r\n                pre.push((  // 向pre添加<SubMenu>\r\n                    <SubMenu key={item.key} title={\r\n                        <span>\r\n                            <Icon type={item.icon} />\r\n                            <span>{item.title}</span>\r\n                        </span>\r\n                    }>\r\n                        {\r\n                            this.getMenuNodes(item.children)\r\n                        }\r\n                    </SubMenu>\r\n                ))\r\n            }\r\n            return pre\r\n        }, [])\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"left-nav\">\r\n                    <Link to='/' className=\"left-nav-header\">\r\n                        <img src={logo} alt=\"logo\"/>\r\n                        <h1>后台管理</h1>\r\n                    </Link>\r\n                </div>\r\n                <Menu mode=\"inline\" theme=\"dark\" >\r\n                    {\r\n                        this.getMenuNodes(menuList)\r\n                    }\r\n                </Menu>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n*/\r\n\r\n/*\r\nexport default class LeftNav extends Component {\r\n    // 根据menu的数据数组生成对应的标签数组  使用map() + 递归调用\r\n    getMenuNodes = (menuList)=>{\r\n        return menuList.map(item=>{\r\n            if(!item.children) {\r\n                return (\r\n                    <Menu.Item key={item.key}>\r\n                        <Link to={item.key}>\r\n                            <Icon type={item.icon} />\r\n                            <span>{item.title}</span>\r\n                        </Link>\r\n                    </Menu.Item>\r\n                )\r\n            } else {\r\n                return (\r\n                    <SubMenu key={item.key} title={\r\n                        <span>\r\n                            <Icon type={item.icon} />\r\n                            <span>{item.title}</span>\r\n                        </span>\r\n                    }>\r\n                        {\r\n                            this.getMenuNodes(item.children)\r\n                        }\r\n                    </SubMenu>\r\n                )\r\n            }\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"left-nav\">\r\n                    <Link to='/' className=\"left-nav-header\">\r\n                        <img src={logo} alt=\"logo\"/>\r\n                        <h1>后台管理</h1>\r\n                    </Link>\r\n                </div>\r\n                <Menu mode=\"inline\" theme=\"dark\" >\r\n                    {\r\n                        this.getMenuNodes(menuList)\r\n                    }\r\n                </Menu>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n*/\r\n\r\n/*\r\nexport default class LeftNav extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"left-nav\">\r\n                    <Link to='/' className=\"left-nav-header\">\r\n                        <img src={logo} alt=\"logo\"/>\r\n                        <h1>后台管理</h1>\r\n                    </Link>\r\n                </div>\r\n                <Menu mode=\"inline\" theme=\"dark\" >\r\n                    <Menu.Item key=\"1\">\r\n                        <Link to=\"/home\">\r\n                            <Icon type=\"pie-chart\" />\r\n                            <span>首页</span>\r\n                        </Link>\r\n                    </Menu.Item>\r\n                    <SubMenu key=\"sub1\" title={\r\n                        <span>\r\n                            <Icon type=\"mail\" />\r\n                            <span>商品</span>\r\n                        </span>\r\n                    }>\r\n                        <Menu.Item key=\"5\">\r\n                            <Link to=\"/category\">\r\n                                <Icon type=\"mail\" />\r\n                                <span>品类管理</span>\r\n                            </Link>\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"6\">\r\n                            <Link to=\"/product\">\r\n                                <Icon type=\"mail\" />\r\n                                <span>商品管理</span>\r\n                            </Link>\r\n                        </Menu.Item>\r\n                    </SubMenu>\r\n                </Menu>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n*/\r\n\r\n","/**\r\n * 包含n个日期时间处理的工具函数模块\r\n */\r\n\r\n// 格式化日期\r\nexport function formatDate(time) {\r\n  if (!time) return ''\r\n  let date = new Date(time)\r\n  let Y = date.getFullYear()\r\n  let M = (date.getMonth() + 1 + '').padStart(2, '0')\r\n  let D = (date.getDate() + '').padStart(2, '0')\r\n  let hh = (date.getHours() + '').padStart(2, '0')\r\n  let mm = (date.getMinutes() + '').padStart(2, '0')\r\n  let ss = (date.getSeconds() + '').padStart(2, '0')\r\n\r\n  return Y + '-' + M + '-' + D + ' ' + hh + ':' + mm + ':' + ss\r\n}\r\n","/**\r\n * 外形像a标签的自定义按钮组件\r\n */\r\nimport React from 'react'\r\nimport './index.less'\r\nexport default function LinkButton(props) {\r\n    return (\r\n        <button {...props} className=\"link-button\"></button>\r\n    )\r\n}\r\n","/**\r\n * 头部组件\r\n */\r\nimport React, {Component} from 'react'\r\nimport {withRouter} from 'react-router-dom'\r\nimport { Modal } from 'antd'\r\nimport { formatDate } from '../../utils/dateUtils'\r\nimport memoryUtils from '../../utils/memoryUtils'\r\nimport {reqWeather} from '../../api'\r\nimport menuList from '../../config/menuConfig'\r\nimport LinkButton from '../link-button/LinkButton'\r\nimport './index.less'\r\nimport storageUtils from \"../../utils/storageUtils\";\r\n\r\n\r\nclass Header extends Component {\r\n    state = {\r\n        currentTime: formatDate(Date.now()),  // 当前时间字符串\r\n        dayPictureUrl: '/images/sunny.gif', // 天气图片url\r\n        weather: '', // 天气的描述文本\r\n        temperature: '',  // 气温\r\n        city: '' // 当前所在城市\r\n    }\r\n    getTime = ()=>{  // 每隔1s获取当前时间, 并更新状态数据currentTime\r\n        this.intervalId = setInterval(()=>{\r\n            const currentTime = formatDate(Date.now())\r\n            this.setState({currentTime})\r\n        }, 1000)\r\n    }\r\n    getWeather = async () => {\r\n        const { city, temperature, weather } = await reqWeather()  // 调用接口请求异步获取数据\r\n        this.setState({city, temperature, weather})  // 更新状态\r\n    }\r\n    getTitle = () => {\r\n        const path = this.props.location.pathname  // 得到当前请求路径\r\n        let title = ''\r\n        menuList.forEach(item=>{\r\n            if (item.key===path) { // 如果当前item对象的key与path一样,item的title就是需要显示的title\r\n                title = item.title\r\n            } else if (item.children) {\r\n                let cItem = item.children.find(cItem=>path.indexOf(cItem.key)===0)  // 在所有子item中查找匹配的\r\n                // 如果有值才说明有匹配的\r\n                if(cItem) {\r\n                    title = cItem.title\r\n                }\r\n            }\r\n        })\r\n        return title\r\n    }\r\n\r\n    logout = ()=>{  // 退出登陆\r\n        Modal.confirm({\r\n            title: '确定退出吗?',\r\n            // content: 'Some descriptions',\r\n            onOk: ()=>{\r\n                // console.log('OK', this)\r\n\r\n                // 1.删除保存的user数据\r\n                storageUtils.removeUser()\r\n                memoryUtils.user = {}\r\n\r\n                // 2.跳转到login\r\n                this.props.history.replace('/login')\r\n            },\r\n            onCancel() {\r\n                // console.log('Cancel')\r\n            },\r\n        });\r\n    }\r\n\r\n    // 第一次render()之后执行一次 一般在此执行异步操作: 发ajax请求/启动定时器\r\n    componentDidMount() {\r\n        this.getTime() // 获取当前的时间\r\n        this.getWeather()  // 获取当前天气\r\n    }\r\n    // 当前组件卸载之前调用\r\n    componentWillUnmount () {\r\n        clearInterval(this.intervalId)  // 清除定时器\r\n    }\r\n\r\n    render() {\r\n        const { currentTime, weather, temperature, city } = this.state\r\n        const username = memoryUtils.user.username\r\n        const title = this.getTitle()  // 得到当前需要显示的title\r\n        return (\r\n            <div className=\"header\">\r\n                <div className=\"header-top\">\r\n                    <span>欢迎, {username}</span>\r\n                    <LinkButton onClick={this.logout}>退出</LinkButton>\r\n                </div>\r\n                <div className=\"header-bottom\">\r\n                    <div className=\"header-bottom-left\">\r\n                        {title}\r\n                    </div>\r\n                    <div className=\"header-bottom-right\">\r\n                        <span>{ currentTime }</span>\r\n                        <span>{city}</span>\r\n                        {/*<img src={this.state.dayPictureUrl} alt=\"weather\"/>*/}\r\n                        <span>{temperature}&nbsp;{weather}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Header)\r\n\r\n/*\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"header\">\r\n                <div className=\"header-top\">\r\n                    <span>欢迎, admin</span>\r\n                    <a href=\"#\" alt=\"\">退出</a>\r\n                </div>\r\n                <div className=\"header-bottom\">\r\n                    <div className=\"header-bottom-left\">\r\n                        首页\r\n                    </div>\r\n                    <div className=\"header-bottom-right\">\r\n                        <span>2021-09-27 10:09:36</span>\r\n                        <img src=\"/images/sunny.gif\" alt=\"\"/>\r\n                        {/!*<img src=\"http://www.weather.com.cn/m/i/weatherpic/29x20/d0.gif\" alt=\"\"/>*!/}\r\n                        <span>晴</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n*/\r\n","/**\r\n * 首页柱状图\r\n */\r\nimport React, {Component} from 'react'\r\nimport { Chart, Interval, Tooltip } from 'bizcharts'\r\n\r\nexport default class Bar extends Component {\r\n\r\n    saleData = [\r\n        {\r\n            month: \"1月\",\r\n            sales: 38\r\n        },\r\n        {\r\n            month: \"2月\",\r\n            sales: 52\r\n        },\r\n        {\r\n            month: \"3月\",\r\n            sales: 61\r\n        },\r\n        {\r\n            month: \"4月\",\r\n            sales: 145\r\n        },\r\n        {\r\n            month: \"5月\",\r\n            sales: 48\r\n        },\r\n        {\r\n            month: \"6月\",\r\n            sales: 38\r\n        },\r\n        {\r\n            month: \"7月\",\r\n            sales: 28\r\n        },\r\n        {\r\n            month: \"8月\",\r\n            sales: 38\r\n        },\r\n        {\r\n            month: \"59月\",\r\n            sales: 68\r\n        },\r\n        {\r\n            month: \"10月\",\r\n            sales: 38\r\n        },\r\n        {\r\n            month: \"11月\",\r\n            sales: 58\r\n        },\r\n        {\r\n            month: \"12月\",\r\n            sales: 38\r\n        }\r\n    ]\r\n    visitData = [\r\n        {\r\n            month: \"1月\",\r\n            sales: 20\r\n        },\r\n        {\r\n            month: \"2月\",\r\n            sales: 36\r\n        },\r\n        {\r\n            month: \"3月\",\r\n            sales: 45\r\n        },\r\n        {\r\n            month: \"4月\",\r\n            sales: 32\r\n        },\r\n        {\r\n            month: \"5月\",\r\n            sales: 37\r\n        },\r\n        {\r\n            month: \"6月\",\r\n            sales: 38\r\n        },\r\n        {\r\n            month: \"7月\",\r\n            sales: 40\r\n        },\r\n        {\r\n            month: \"8月\",\r\n            sales: 29\r\n        },\r\n        {\r\n            month: \"59月\",\r\n            sales: 35\r\n        },\r\n        {\r\n            month: \"10月\",\r\n            sales: 37\r\n        },\r\n        {\r\n            month: \"11月\",\r\n            sales: 41\r\n        },\r\n        {\r\n            month: \"12月\",\r\n            sales: 46\r\n        }\r\n    ]\r\n    render() {\r\n        const data = this.props.isVisited ? this.visitData : this.saleData\r\n        return (\r\n            <div style={{width:'100%'}}>\r\n                <Chart height={260} autoFit data={data} >\r\n                    <Interval position=\"month*sales\" />\r\n                    <Tooltip shared/>\r\n                </Chart>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\nimport { Chart, Line, Point, Tooltip, Legend } from 'bizcharts'\r\n\r\nexport default class LineGraph extends Component {\r\n    // 数据源\r\n    data = [\r\n        {\r\n            month: \"Jan\",\r\n            city: \"Tokyo\",\r\n            temperature: 7\r\n        },\r\n        {\r\n            month: \"Jan\",\r\n            city: \"London\",\r\n            temperature: 3.9\r\n        },\r\n        {\r\n            month: \"Feb\",\r\n            city: \"Tokyo\",\r\n            temperature: 6.9\r\n        },\r\n        {\r\n            month: \"Feb\",\r\n            city: \"London\",\r\n            temperature: 4.2\r\n        },\r\n        {\r\n            month: \"Mar\",\r\n            city: \"Tokyo\",\r\n            temperature: 9.5\r\n        },\r\n        {\r\n            month: \"Mar\",\r\n            city: \"London\",\r\n            temperature: 5.7\r\n        },\r\n        {\r\n            month: \"Apr\",\r\n            city: \"Tokyo\",\r\n            temperature: 14.5\r\n        },\r\n        {\r\n            month: \"Apr\",\r\n            city: \"London\",\r\n            temperature: 8.5\r\n        },\r\n        {\r\n            month: \"May\",\r\n            city: \"Tokyo\",\r\n            temperature: 18.4\r\n        },\r\n        {\r\n            month: \"May\",\r\n            city: \"London\",\r\n            temperature: 11.9\r\n        },\r\n        {\r\n            month: \"Jun\",\r\n            city: \"Tokyo\",\r\n            temperature: 21.5\r\n        },\r\n        {\r\n            month: \"Jun\",\r\n            city: \"London\",\r\n            temperature: 15.2\r\n        },\r\n        {\r\n            month: \"Jul\",\r\n            city: \"Tokyo\",\r\n            temperature: 25.2\r\n        },\r\n        {\r\n            month: \"Jul\",\r\n            city: \"London\",\r\n            temperature: 17\r\n        },\r\n        {\r\n            month: \"Aug\",\r\n            city: \"Tokyo\",\r\n            temperature: 26.5\r\n        },\r\n        {\r\n            month: \"Aug\",\r\n            city: \"London\",\r\n            temperature: 16.6\r\n        },\r\n        {\r\n            month: \"Sep\",\r\n            city: \"Tokyo\",\r\n            temperature: 23.3\r\n        },\r\n        {\r\n            month: \"Sep\",\r\n            city: \"London\",\r\n            temperature: 14.2\r\n        },\r\n        {\r\n            month: \"Oct\",\r\n            city: \"Tokyo\",\r\n            temperature: 18.3\r\n        },\r\n        {\r\n            month: \"Oct\",\r\n            city: \"London\",\r\n            temperature: 10.3\r\n        },\r\n        {\r\n            month: \"Nov\",\r\n            city: \"Tokyo\",\r\n            temperature: 13.9\r\n        },\r\n        {\r\n            month: \"Nov\",\r\n            city: \"London\",\r\n            temperature: 6.6\r\n        },\r\n        {\r\n            month: \"Dec\",\r\n            city: \"Tokyo\",\r\n            temperature: 9.6\r\n        },\r\n        {\r\n            month: \"Dec\",\r\n            city: \"London\",\r\n            temperature: 4.8\r\n        }\r\n    ]\r\n\r\n    scale = {\r\n        temperature: { min: 0 },\r\n        city: {\r\n            formatter: v => {\r\n                return {\r\n                    London: '伦敦',\r\n                    Tokyo: '东京'\r\n                }[v]\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{float: 'right', width: '60%', marginRight:'10%', height: 300, backgroundColor: '#eee'}}>\r\n                <Chart scale={this.scale} padding={[30, 20, 60, 40]} autoFit height={300} data={this.data} interactions={['element-active']}>\r\n                    <Point position=\"month*temperature\" color=\"city\" shape='circle' />\r\n                    <Line shape=\"smooth\" position=\"month*temperature\" color=\"city\" label=\"temperature\" />\r\n                    <Tooltip shared showCrosshairs />\r\n                    <Legend background={{ padding:[5,100,5,36], style: {fill: '#eaeaea', stroke: '#fff'}}} />\r\n                </Chart>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","/**\r\n * 后台首页路由\r\n */\r\nimport React, {Component} from 'react'\r\nimport { Divider, Icon, Card, Statistic, DatePicker, Timeline } from 'antd'\r\nimport './home.less'\r\nimport Bar from './components/bar'\r\nimport LineGraph from './components/line'\r\n\r\nimport moment from 'moment';\r\nconst {RangePicker} = DatePicker\r\nconst dateFormat = 'YYYY/MM/DD'\r\n\r\nexport default class Home extends Component {\r\n    state = {\r\n        isVisited: true\r\n    }\r\n\r\n    handleChange = (isVisited)=>{\r\n        return ()=>this.setState({ isVisited })\r\n    }\r\n\r\n    render() {\r\n        const {isVisited} = this.state\r\n        const contentTitle = (\r\n            <div className=\"home-menu\">\r\n                <span className={isVisited ? 'home-menu-left home-menu-active' : 'home-menu-left'}\r\n                      onClick={this.handleChange(true)}>访问量</span>\r\n                <span className={isVisited ? '' : 'home-menu-active'}\r\n                      onClick={this.handleChange(false)}>销售量</span>\r\n            </div>\r\n        )\r\n        const contentExtra = (\r\n            <RangePicker defaultValue={[moment('2021/01/01', dateFormat), moment('2022/01/01', dateFormat)]}\r\n                         format={dateFormat}/>\r\n        )\r\n\r\n        return (\r\n            <div className=\"home\">\r\n                <div className=\"home-top\">欢迎来到后台管理系统</div>\r\n                <Divider />\r\n\r\n                <Card className=\"home-card\" title=\"商品总量\" extra={<Icon type=\"question-circle\" style={{color: 'rgba(0,0,0,.45)'}}/>}>\r\n                    <Statistic value={1128163} valueStyle={{ fontWeight:'bolder' }} suffix=\"个\" />\r\n                    <Statistic value={15} valueStyle={{ fontSize: 15 }} prefix='周同比'\r\n                        suffix={<div>%<Icon style={{color:'red', marginLeft:10}} type=\"arrow-down\"/></div>}\r\n                    />\r\n                    <Statistic value={10} valueStyle={{ fontSize: 15 }} prefix={'日同比'}\r\n                        suffix={<div>%<Icon style={{color:'#3f8600', marginLeft:10}} type=\"arrow-up\"/></div>}\r\n                    />\r\n                </Card>\r\n\r\n                <LineGraph/>\r\n\r\n                <Card className=\"home-content\" title={contentTitle} extra={contentExtra}>\r\n                    <Card className=\"home-table-left\" title={isVisited ? '访问趋势' : '销售趋势'}\r\n                          bodyStyle={{padding: 0, height: 275}} extra={<Icon type=\"reload\"/>}>\r\n                        <Bar isVisited={isVisited}/>\r\n                    </Card>\r\n\r\n                    <Card title='任务' extra={<Icon type=\"reload\"/>} className=\"home-table-right\">\r\n                        <Timeline>\r\n                            <Timeline.Item color=\"green\">新版本迭代会</Timeline.Item>\r\n                            <Timeline.Item color=\"green\">完成网站设计初版</Timeline.Item>\r\n                            <Timeline.Item color=\"red\">\r\n                                <p>联调接口</p>\r\n                                <p>功能验收</p>\r\n                            </Timeline.Item>\r\n                            <Timeline.Item color=\"gray\">\r\n                                <p>登录功能设计</p>\r\n                                <p>权限验证</p>\r\n                                <p>页面排版</p>\r\n                            </Timeline.Item>\r\n                        </Timeline>\r\n                    </Card>\r\n                </Card>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\nimport { Form, Select, Input } from 'antd'\r\nimport PropTypes from 'prop-types'\r\nconst { Option } = Select\r\nclass AddForm extends Component {\r\n    static propTypes = {\r\n        setForm: PropTypes.func.isRequired, // 用来传递form对象的函数\r\n        categoryList: PropTypes.array.isRequired, // 一级分类的数组\r\n        parentId: PropTypes.string.isRequired, // 父分类的ID\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setForm(this.props.form)\r\n    }\r\n\r\n    render() {\r\n        const { categoryList, parentId } = this.props\r\n        const { getFieldDecorator } = this.props.form\r\n        // console.log(categoryList)\r\n        const formItemLayout = {  // 指定Item布局的配置对象\r\n            labelCol: { span: 4 },   // 左侧label的宽度\r\n            wrapperCol: { span: 20 }  // 右侧包裹的宽度\r\n        }\r\n        return (\r\n            <Form {...formItemLayout}>\r\n                <Form.Item label=\"所属分类\">\r\n                    {getFieldDecorator('parentId', { initialValue: parentId })(\r\n                        <Select>\r\n                            <Option value='0'>一级分类</Option>\r\n                            {\r\n                                categoryList.map(item => <Option value={item._id} key={item._id}>{item.name}</Option>)\r\n                            }\r\n                        </Select>\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item label=\"分类名称\">\r\n                    {getFieldDecorator('categoryName', {\r\n                            rules: [{required: true, message: '分类名称不能为空!'}],\r\n                            initialValue: ''\r\n                        })(\r\n                            <Input placeholder=\"请输入分类名称\"/>\r\n                        )\r\n                    }\r\n                </Form.Item>\r\n\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form.create()(AddForm)\r\n","/**\r\n * 更新分类的form组件\r\n */\r\nimport React, {Component} from 'react'\r\nimport { Form, Input } from 'antd'\r\nimport PropTypes from 'prop-types'  // yarn add prop-types\r\n\r\nclass UpdateForm extends Component {\r\n    static propTypes = {\r\n        categoryName: PropTypes.string.isRequired,\r\n        setForm: PropTypes.func.isRequired\r\n    }\r\n\r\n    componentDidMount() {\r\n        // 将form对象通过setForm()传递父组件\r\n        this.props.setForm(this.props.form)\r\n    }\r\n    render() {\r\n        const { categoryName } = this.props\r\n        const { getFieldDecorator } = this.props.form\r\n        const formItemLayout = {  // 指定Item布局的配置对象\r\n            labelCol: { span: 4 },   // 左侧label的宽度\r\n            wrapperCol: { span: 20 }  // 右侧包裹的宽度\r\n        }\r\n        return (\r\n            <Form {...formItemLayout}>\r\n                <Form.Item label=\"分类名称\">\r\n                    {getFieldDecorator('categoryName', {\r\n                            rules: [{required: true, message: '分类名称不能为空!'}],\r\n                            initialValue: categoryName\r\n                        })(\r\n                            <Input placeholder=\"请输入分类名称\"/>\r\n                        )\r\n                    }\r\n                </Form.Item>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form.create()(UpdateForm)\r\n","/**\r\n * 商品分类路由\r\n */\r\nimport React, {Component} from 'react'\r\nimport { Card, Table, Button, Icon, message, Modal } from 'antd'\r\nimport LinkButton from '../../../../components/link-button/LinkButton'\r\nimport { reqCategoryList, reqAddCategory, reqUpdateCategory } from '../../../../api/index'\r\nimport AddForm from './components/addForm'\r\nimport UpdateForm from './components/updateForm'\r\n\r\nexport default class Category extends Component {\r\n    state = {\r\n        loading: false, // 是否正在获取数据中\r\n        categoryList: [],  // 一级分类列表\r\n        subCategoryList: [],  // 二级分类列表\r\n        parentId: '0', // 当前需要显示的分类列表的父分类ID\r\n        parentName: '', // 当前需要显示的分类列表的父分类名称\r\n        showStatus: 0, // 标识添加/更新的确认框是否显示, 0: 都不显示, 1: 显示添加, 2: 显示更新\r\n    }\r\n\r\n    // 初始化Table所有列的数组\r\n    initColumns = ()=>{\r\n        this.columns = [\r\n            {\r\n                title: '分类名称',\r\n                dataIndex: 'name'  // 指定显示数据的属性名\r\n            },\r\n            {\r\n                title: '操作',\r\n                width: 300,\r\n                render: (category) => (  // 返回需要显示的界面标签\r\n                    <span>\r\n                        <LinkButton onClick={()=>this.showUpdateCategory(category)}>修改分类</LinkButton>\r\n\r\n                        {/*如何向事件回调函数传递参数: 先定义一个匿名函数, 在函数调用处理的函数并传入数据*/}\r\n                        {\r\n                            this.state.parentId==='0' ? (\r\n                                <LinkButton onClick={()=>this.showSubCategoryList(category)}>查看子分类</LinkButton>\r\n                            ) : null\r\n                        }\r\n                    </span>\r\n                )\r\n\r\n            }\r\n        ]\r\n    }\r\n\r\n    // 异步获取一级/二级分类列表显示\r\n    getCategoryList = async (parentId)=>{  // parentId: 如果没有指定根据状态中的parentId请求, 如果指定了根据指定的请求\r\n        this.setState({ loading: true })  // 在发请求前, 显示loading\r\n        parentId = parentId || this.state.parentId\r\n        const result = await reqCategoryList(parentId)  // 发异步ajax请求, 获取数据\r\n        this.setState({loading: false})  // 在请求完成后, 隐藏loading\r\n        if(result.status === 0 ) {\r\n            const categoryList = result.data  // 取出分类数组(可能是一级也可能二级的)\r\n            if(parentId==='0') {\r\n                this.setState({categoryList})  // 更新一级分类状态\r\n            } else {\r\n                this.setState({subCategoryList: categoryList})  // 更新二级分类状态\r\n            }\r\n        } else {\r\n            message.error('获取分类列表失败')\r\n        }\r\n    }\r\n\r\n    // 显示指定一级分类对象的二子列表\r\n    showSubCategoryList = (category)=>{\r\n        // console.log(category)\r\n        this.setState({\r\n            parentId: category._id,\r\n            parentName: category.name\r\n        }, ()=>{  // 在状态更新且重新render()后执行\r\n            // console.log('parentId', this.state.parentId)  // '614751fc286080320c511c4e'\r\n            this.getCategoryList()  // 获取二级分类列表显示\r\n        })\r\n\r\n        // setState()不能立即获取最新的状态: 因为setState()是异步更新状态的\r\n        // console.log('parentId', this.state.parentId)  // '0'\r\n    }\r\n\r\n    // 显示一级分类列表\r\n    showCategoryList = ()=>{\r\n        this.setState({  // 更新为显示一级列表的状态\r\n            parentId: '0',\r\n            parentName: '',\r\n            subCategoryList: []\r\n        })\r\n    }\r\n\r\n\r\n    // 显示添加的确认框\r\n    showAddCategory = ()=>{\r\n        this.setState({\r\n            showStatus: 1\r\n        })\r\n    }\r\n    // 添加分类\r\n    addCategory= ()=>{\r\n        this.addForm.validateFields( async (error, values)=>{  // 进行表单验证, 只有通过了才处理\r\n            console.log(error, values)\r\n            if(!error) {\r\n                this.setState({\r\n                    showStatus: 0  // 隐藏确认框\r\n                })\r\n\r\n                // 收集数据, 并提交添加分类的请求\r\n                const { parentId, categoryName } = values\r\n                this.addForm.resetFields()  // 清除输入数据\r\n                const result = await reqAddCategory(parentId, categoryName)\r\n                // console.log(result)\r\n                if(result.status === 0) {\r\n                    if(parentId===this.state.parentId) {  // 添加的分类就是当前分类列表下的分类\r\n                        this.getCategoryList()  // 重新获取当前分类列表显示\r\n                    } else if (parentId==='0'){ // 在二级分类列表下添加一级分类, 重新获取一级分类列表, 但不需要显示一级列表\r\n                        this.getCategoryList('0')\r\n                    }\r\n                }\r\n            } else {\r\n                console.log('addCategory()', error)\r\n            }\r\n        })\r\n    }\r\n    // 响应点击添加分类的取消按钮: 隐藏确定框\r\n    handleAddCancel = ()=>{\r\n        this.addForm.resetFields()  // 清除输入数据\r\n        this.setState({\r\n            showStatus: 0   // 隐藏确认框\r\n        })\r\n    }\r\n\r\n    // 显示修改的确认框\r\n    showUpdateCategory= (category)=>{\r\n        this.category = category  // 保存分类对象\r\n        this.setState({\r\n            showStatus: 2\r\n        })\r\n    }\r\n    // 修改分类\r\n    updateCategory= ()=>{\r\n        // console.log('updateCategory')\r\n        this.updateForm.validateFields( async (error, values)=>{  // 进行表单验证, 只有通过了才处理\r\n            // console.log(error, values)\r\n            if(!error) {\r\n                // 1. 隐藏确认框\r\n                this.setState({\r\n                    showStatus: 0\r\n                })\r\n\r\n                const categoryId = this.category._id\r\n                const categoryName = values.categoryName\r\n                this.updateForm.resetFields()  // 清除输入数据\r\n                if(this.category.name !== categoryName) {\r\n                    this.category = {}\r\n                    // 2. 发请求更新分类\r\n                    const result = await reqUpdateCategory({categoryId, categoryName})\r\n                    // console.log(result)\r\n                    if(result.status === 0) {\r\n                        // 3. 重新显示列表\r\n                        this.getCategoryList()\r\n                    }\r\n                }\r\n            } else {\r\n                console.log('updateCategory()', error)\r\n            }\r\n        })\r\n    }\r\n    // 响应点击修改分类的取消按钮: 隐藏确定框\r\n    handleUpdateCancel = ()=>{\r\n        this.updateForm.resetFields()  // 清除输入数据\r\n        this.setState({\r\n            showStatus: 0   // 隐藏确认框\r\n        })\r\n    }\r\n\r\n    UNSAFE_componentWillMount() {\r\n        this.initColumns()\r\n    }\r\n    componentDidMount() {\r\n        // 执行异步任务: 发异步ajax请求\r\n        this.getCategoryList()  // 获取一级分类列表显示\r\n    }\r\n\r\n    render() {\r\n        const { categoryList, subCategoryList, loading, parentId, parentName, showStatus } = this.state  // 读取状态数据\r\n        const title = parentId==='0' ? '一级分类列表' : (    // card的左侧\r\n            <span>\r\n                <LinkButton onClick={this.showCategoryList}>一级分类列表</LinkButton>\r\n                <Icon type=\"arrow-right\" style={{marginRight: 5}}/>\r\n                <span>{parentName}</span>\r\n            </span>\r\n        )\r\n        const extra = (  // Card的右侧\r\n            <Button type=\"primary\" onClick={this.showAddCategory}>\r\n                <Icon type=\"plus\"/>\r\n                添加\r\n            </Button>\r\n        )\r\n\r\n        const category = this.category || {} // 读取指定的分类, 如果还没有指定一个空对象\r\n        return (\r\n            <Card title={title} extra={extra}>\r\n                <Table bordered rowKey=\"_id\" dataSource={ parentId==='0' ? categoryList : subCategoryList }\r\n                       columns={this.columns} loading={loading}\r\n                       pagination={{\r\n                           defaultPageSize: 10, defaultCurrent: 1,\r\n                           showSizeChanger:true, pageSizeOptions: ['5','10','20','40'],\r\n                           showQuickJumper: true\r\n                       }}>\r\n                </Table>\r\n\r\n                <Modal title=\"添加分类\" visible={showStatus === 1} onOk={this.addCategory} onCancel={this.handleAddCancel}>\r\n                    <AddForm categoryList={categoryList} parentId={parentId} setForm={(form) => {this.addForm = form}} />\r\n                </Modal>\r\n                <Modal title=\"修改分类\" visible={showStatus === 2} onOk={this.updateCategory} onCancel={this.handleUpdateCancel}>\r\n                    <UpdateForm categoryName={category.name} setForm={(form) => {this.updateForm = form}}/>\r\n                </Modal>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\n/*\r\nexport default class Category extends Component {\r\n    render() {\r\n        const title = '一级分类列表'  // card的左侧\r\n        const extra = (  // Card的右侧\r\n            <Button type=\"primary\">\r\n                <Icon type=\"plus\"/>\r\n                添加\r\n            </Button>\r\n        )\r\n        const dataSource = [\r\n            {\r\n                \"parentId\": \"0\",\r\n                \"_id\": \"614751fc286080320c511c4e\",\r\n                \"name\": \"家用电器\",\r\n                \"__v\": 0\r\n            },\r\n            {\r\n                \"parentId\": \"0\",\r\n                \"_id\": \"614751fc286080320c511c57\",\r\n                \"name\": \"三星\",\r\n                \"__v\": 0\r\n            },\r\n            {\r\n                \"parentId\": \"0\",\r\n                \"_id\": \"614751fc286080320c511c4f\",\r\n                \"name\": \"手机\",\r\n                \"__v\": 0\r\n            },\r\n        ]\r\n        const columns = [\r\n            {\r\n                title: '分类名称',\r\n                dataIndex: 'name'  // 指定显示数据的属性名\r\n            },\r\n            {\r\n                title: '操作',\r\n                render: () => (  // 返回需要显示的界面标签\r\n                    <span>\r\n                        <LinkButton>修改分类</LinkButton>\r\n                        <LinkButton>查看子分类</LinkButton>\r\n                    </span>\r\n                ),\r\n                width: 300\r\n            }\r\n        ]\r\n        return (\r\n            <Card title={title} extra={extra}>\r\n                <Table bordered rowKey=\"_id\" dataSource={dataSource} columns={columns}></Table>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n*/\r\n","/**\r\n * Product的默认子路由组件\r\n */\r\nimport React, {Component} from 'react'\r\nimport { Card, Select, Input, Button, Table, message } from 'antd'\r\nimport LinkButton from '../../../../../components/link-button/LinkButton'\r\nimport { reqProductList, reqSearchProductList, reqUpdateStatus } from '../../../../../api/index'\r\nimport memoryUtils from '../../../../../utils/memoryUtils'\r\nconst Option = Select.Option\r\n\r\n\r\nexport default class ProductHome extends Component {\r\n    state = {\r\n        productList: [], // 商品的数组\r\n        total: 0, // 商品的总数量\r\n        loading: false, // 是否正在加载中\r\n        searchType: 'productName', // 根据哪个字段搜索\r\n        searchName: '', // 搜索的关键字\r\n    }\r\n\r\n    // 初始化table的列的数组\r\n    initColumns = ()=>{\r\n        this.columns = [\r\n            {\r\n                title: '商品名称',\r\n                dataIndex: 'name',\r\n            },\r\n            {\r\n                title: '商品描述',\r\n                dataIndex: 'desc',\r\n            },\r\n            {\r\n                width: 120,\r\n                title: '价格',\r\n                dataIndex: 'price',\r\n                render: (price)=>'¥'+price  // 当指定了对应的属性时, 传入的是对应的属性值\r\n            },\r\n            {\r\n                width: 160,\r\n                title: '状态',\r\n                // dataIndex: 'status',\r\n                render: (product)=>{   // 当未指定了对应的属性时, 传入的是整行数据\r\n                    const {_id, status} = product\r\n                    const newStatus = status===1 ? 2 : 1\r\n                    return (\r\n                        <span>\r\n                            <span style={{width: 60,display: 'inline-block'}}>{status===1 ? '在售' : '已下架'}</span>\r\n                            <Button type=\"primary\" onClick={()=>this.updateStatus(_id, newStatus)}>\r\n                                {status===1 ? '下架' : '上架'}\r\n                            </Button>\r\n                        </span>\r\n                    )\r\n                }\r\n            },\r\n            {\r\n                width: 120,\r\n                title: '操作',\r\n                render: (product)=>{\r\n                    // BrowserRouter\r\n                    /*return (\r\n                        <span>\r\n                            <LinkButton onClick={()=>this.props.history.push('/product/detail', {product})}>详情</LinkButton>\r\n                            <LinkButton onClick={()=>this.props.history.push('/product/add_update', product)}>修改</LinkButton>\r\n                        </span>\r\n                    )*/\r\n\r\n                    // HashRouter\r\n                    return (\r\n                        <span>\r\n                            <LinkButton onClick={()=>this.showDetail(product)}>详情</LinkButton>\r\n                            <LinkButton onClick={()=>this.showUpdate(product)}>修改</LinkButton>\r\n                        </span>\r\n                    )\r\n\r\n                }\r\n            },\r\n        ];\r\n    }\r\n\r\n    // 显示商品详情界面\r\n    showDetail = (product)=>{  // 缓存product对象 ==> 给detail组件使用\r\n        memoryUtils.product = product\r\n        this.props.history.push('/product/detail')\r\n    }\r\n    // 显示修改商品界面\r\n    showUpdate = (product) => {\r\n        memoryUtils.product = product\r\n        this.props.history.push('/product/add_update')\r\n    }\r\n\r\n    // 获取指定页码的列表数据显示\r\n    getProductList = async (pageNum, pageSize)=>{\r\n        this.pageNum = pageNum\r\n        this.pageSize = pageSize\r\n        this.setState({loading: true}) // 显示loading\r\n\r\n        const {searchType, searchName} = this.state\r\n        let result\r\n        if(searchName) {  // 如果搜索关键字有值, 说明我们要做搜索分页\r\n            result = await reqSearchProductList({pageNum, pageSize, searchType, searchName })\r\n        } else{  // 一般分页请求\r\n            result = await reqProductList(pageNum, pageSize)\r\n        }\r\n\r\n        this.setState({loading: false}) // 隐藏loading\r\n        if(result.status === 0) {\r\n            const { total, list } = result.data\r\n            this.setState({\r\n                total: total,\r\n                productList: list\r\n            })\r\n        }\r\n    }\r\n\r\n    // 更新指定商品的状态\r\n    updateStatus = async (productId, status)=>{\r\n        const result = await reqUpdateStatus(productId, status)\r\n        if(result.status===0) {\r\n            message.success('更新商品状态成功')\r\n            this.getProductList(this.pageNum, this.pageSize)\r\n        }\r\n    }\r\n\r\n    UNSAFE_componentWillMount() {\r\n        this.initColumns()\r\n    }\r\n    componentDidMount() {\r\n        this.getProductList(1,5)\r\n    }\r\n\r\n    render() {\r\n        const { productList, total, loading, searchType, searchName } = this.state\r\n        const title = (\r\n            <span>\r\n                <Select value={searchType} style={{width:120}} onChange={value=>this.setState({searchType: value})}>\r\n                    <Option value=\"productName\">按名称搜索</Option>\r\n                    <Option value=\"productDesc\">按描述搜索</Option>\r\n                </Select>\r\n                <Input placeholder='请输入关键字' style={{width:150, margin:'0 15px'}} value={searchName}\r\n                       onChange={event => this.setState({searchName:event.target.value})}/>\r\n                <Button type=\"primary\" onClick={()=>this.getProductList(1,5)}>搜索</Button>\r\n            </span>\r\n        )\r\n        const extra = (\r\n            <Button type=\"primary\" icon=\"plus\" onClick={()=>this.props.history.push('/product/add_update')}>添加商品</Button>\r\n        )\r\n\r\n        return (\r\n            <Card title={title} extra={extra}>\r\n                <Table rowKey='_id' bordered dataSource={productList} columns={this.columns} loading={loading}\r\n                       pagination={{\r\n                           defaultPageSize: 5, defaultCurrent: 1,\r\n                           total: total, current: this.pageNum, pageSize: this.pageSize,\r\n                           showSizeChanger:true, pageSizeOptions: ['5','10','20','40'],\r\n                           showQuickJumper: true,\r\n                           onShowSizeChange: this.getProductList,\r\n                           onChange: this.getProductList\r\n                       }}\r\n                >\r\n                </Table>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\n/*export default class ProductHome extends Component {\r\n    state = {\r\n        productList: [], // 商品的数组\r\n        total: 0, // 商品的总数量\r\n        loading: false, // 是否正在加载中\r\n        searchName: '', // 搜索的关键字\r\n        searchType: 'productName', // 根据哪个字段搜索\r\n        pageNum: 1,   // 当前页号\r\n        pageSize: 5,  // 每页多少条数据\r\n    }\r\n\r\n    // 初始化table的列的数组\r\n    initColumns = ()=>{\r\n        this.columns = [\r\n            {\r\n                title: '商品名称',\r\n                dataIndex: 'name',\r\n            },\r\n            {\r\n                title: '商品描述',\r\n                dataIndex: 'desc',\r\n            },\r\n            {\r\n                width: 120,\r\n                title: '价格',\r\n                dataIndex: 'price',\r\n                render: (price)=>'¥'+price  // 当指定了对应的属性时, 传入的是对应的属性值\r\n            },\r\n            {\r\n                width: 160,\r\n                title: '状态',\r\n                // dataIndex: 'status',\r\n                render: (product)=>{   // 当未指定了对应的属性时, 传入的是整行数据\r\n                    const {status} = product\r\n                    return (\r\n                        <span>\r\n                            <span style={{width: 60,display: 'inline-block'}}>{status===1 ? '在售' : '已下架'}</span>\r\n                            <Button type=\"primary\">{status===1 ? '下架' : '上架'}</Button>\r\n                        </span>\r\n                    )\r\n                }\r\n            },\r\n            {\r\n                width: 120,\r\n                title: '操作',\r\n                render: (product)=>{\r\n                    return (\r\n                        <span>\r\n                            <LinkButton>详情</LinkButton>\r\n                            <LinkButton>修改</LinkButton>\r\n                        </span>\r\n                    )\r\n\r\n                }\r\n            },\r\n        ];\r\n    }\r\n\r\n    // 获取指定页码的列表数据显示\r\n    getProductList = async ()=>{\r\n        const { pageNum, pageSize } = this.state\r\n        const result = await reqProductList(pageNum, pageSize)\r\n        if(result.status === 0) {\r\n            const { total, list } = result.data\r\n            this.setState({\r\n                total: total,\r\n                productList: list\r\n            })\r\n        }\r\n    }\r\n\r\n    onShowSizeChange = (current, pageSize)=>{\r\n        // console.log(current, pageSize);\r\n        this.setState({\r\n            pageNum: 1,\r\n            pageSize: pageSize\r\n        }, ()=>{\r\n            this.getProductList()\r\n        })\r\n    }\r\n    onChange = (current, pageSize)=>{\r\n        this.setState({\r\n            pageNum: current,\r\n            pageSize: pageSize\r\n        }, ()=>{\r\n            this.getProductList()\r\n        })\r\n    }\r\n\r\n    UNSAFE_componentWillMount() {\r\n        this.initColumns()\r\n    }\r\n    componentDidMount() {\r\n        this.getProductList()\r\n    }\r\n\r\n    render() {\r\n        const { productList, total, pageNum, pageSize } = this.state\r\n        const title = (\r\n            <span>\r\n                <Select value=\"1\" style={{width:120}}>\r\n                    <Option value=\"1\">按名称搜索</Option>\r\n                    <Option value=\"2\">按描述搜索</Option>\r\n                </Select>\r\n                <Input placeholder='请输入关键字' style={{width:150, margin:'0 15px'}} />\r\n                <Button type=\"primary\">搜索</Button>\r\n            </span>\r\n        )\r\n        const extra = (\r\n            <Button type=\"primary\" icon=\"plus\">添加商品</Button>\r\n        )\r\n\r\n        return (\r\n            <Card title={title} extra={extra}>\r\n                <Table rowKey='_id' bordered dataSource={productList} columns={this.columns}\r\n                       pagination={{\r\n                           defaultPageSize: 5, defaultCurrent: 1,\r\n                           total: total, current: pageNum, pageSize: pageSize,\r\n                           showSizeChanger:true, pageSizeOptions: ['5','10','20','40'],\r\n                           showQuickJumper: true,\r\n                           onShowSizeChange: this.onShowSizeChange,\r\n                           onChange: this.onChange\r\n                       }}\r\n                >\r\n                </Table>\r\n            </Card>\r\n        )\r\n    }\r\n}*/\r\n","/**\r\n * 包含一些常量值的模块\r\n */\r\nexport const PAGE_SIZE = 3 // 每页显示的记录数\r\nexport const BASE_IMG_URL = 'http://localhost:5000/upload/' // 上传图片的基础路径\r\n","/**\r\n * 用于图片上传的组件\r\n */\r\nimport React, {Component} from 'react'\r\nimport {Icon, Upload, Modal, message} from 'antd'\r\nimport PropTypes from 'prop-types'\r\nimport { reqDeleteImg } from '../../../../../api/index'\r\nimport { BASE_IMG_URL } from '../../../../../utils/constants'\r\n\r\nfunction getBase64(file) {\r\n    return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => resolve(reader.result);\r\n        reader.onerror = error => reject(error);\r\n    });\r\n}\r\n\r\nexport default class PicturesWall extends Component {\r\n    /*state = {\r\n        previewVisible: false, // 标识是否显示大图预览Modal\r\n        previewImage: '', // 大图的url\r\n        fileList: [  // 图片列表\r\n            /!*{\r\n                uid: '-1', // 每个file都有自己唯一的id\r\n                name: 'image.png', // 图片文件名\r\n                status: 'done', // 图片状态: done已上传, uploading: 正在上传中, removed: 已删除, error: 上传错误\r\n                url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png', // 图片地址\r\n            },\r\n            {\r\n                uid: '-2',\r\n                name: 'image.png',\r\n                status: 'error',\r\n            },*!/\r\n        ],\r\n    }*/\r\n\r\n    static propTypes = {\r\n        imgs: PropTypes.array.isRequired\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        let fileList = []\r\n        const {imgs} = props // 如果传入了imgs属性\r\n        if(imgs && imgs.length>0){\r\n            fileList = imgs.map((img,index)=>({\r\n                uid: -index,\r\n                name: img,\r\n                url: BASE_IMG_URL + img,\r\n                status: 'done'\r\n            }))\r\n        }\r\n\r\n        this.state = {  // 初始化状态\r\n            previewVisible: false, // 标识是否显示大图预览Modal\r\n            previewImage: '', // 大图的url\r\n            fileList,  // 图片列表\r\n        }\r\n    }\r\n\r\n    // 隐藏Modal\r\n    handleCancel = () => this.setState({ previewVisible: false });\r\n\r\n    // 图片预览\r\n    handlePreview = async file => {\r\n        // console.log('handlePreview()',file)\r\n        if (!file.url && !file.preview) {\r\n            file.preview = await getBase64(file.originFileObj);\r\n        }\r\n\r\n        this.setState({\r\n            previewImage: file.url || file.preview,\r\n            previewVisible: true,\r\n        });\r\n    };\r\n\r\n    // 上传文件改变时  file: 当前操作的图片文件(上传/删除)  fileList: 所有已上传图片文件对象的数组\r\n    handleChange = async ({ file, fileList }) => {\r\n        // console.log('handleChange()', file, fileList, file===fileList[fileList.length-1])\r\n        if(file.status==='done') {  // 一旦上传成功, 将当前上传的file的信息修正(name, url)\r\n            const result= file.response\r\n            // console.log(result)  // {status: 0, data: {name: 'xxx.jpg', url: '图片地址'}}\r\n\r\n            if(result.status===0) {\r\n                message.success('上传图片成功!')\r\n                const { name, url } = result.data\r\n                file = fileList[fileList.length-1]\r\n                file.name = name\r\n                file.url = url\r\n                // console.log(file)\r\n            } else {\r\n                message.error('上传图片失败!')\r\n            }\r\n        } else if(file.status==='removed') { // 删除图片\r\n            const result= await reqDeleteImg(file.name)\r\n            if(result.status===0) {\r\n                message.success('删除图片成功!')\r\n            } else {\r\n                message.error('删除图片失败!')\r\n            }\r\n        }\r\n\r\n\r\n        this.setState({ fileList })  // 在操作(上传/删除)过程中更新fileList状态\r\n    };\r\n\r\n    // 获取所有已上传图片文件名的数组\r\n    getImgList = ()=>{\r\n        return this.state.fileList.map(file=>file.name)\r\n    }\r\n\r\n    render() {\r\n        const { previewVisible, previewImage, fileList } = this.state;\r\n        const uploadButton = (\r\n            <div>\r\n                <Icon type=\"plus\" />\r\n                <div className=\"ant-upload-text\">Upload</div>\r\n            </div>\r\n        )\r\n        return (\r\n            <div>\r\n                <Upload\r\n                    action=\"/manage/img/upload\"  /*上传图片的接口地址*/\r\n                    accept='image/*'  /*只接收图片格式*/\r\n                    name='image'  /*发给后台接口的请求参数名*/\r\n                    listType=\"picture-card\"  /*卡片样式*/\r\n                    fileList={fileList}  /*所有已上传图片文件对象的数组*/\r\n                    onPreview={this.handlePreview}  /*点击文件链接或预览图标时的回调*/\r\n                    onChange={this.handleChange}  /*上传文件改变时的状态*/\r\n                >\r\n                    {fileList.length >= 4 ? null : uploadButton}\r\n                </Upload>\r\n\r\n                <Modal visible={previewVisible} footer={null} onCancel={this.handleCancel}>\r\n                    <img alt=\"图片预览\" style={{ width: '100%' }} src={previewImage} />\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","/**\r\n * 用来指定商品详情的富文本编辑器组件\r\n */\r\nimport React, { Component } from 'react'\r\nimport { EditorState, convertToRaw, ContentState } from 'draft-js'\r\nimport { Editor } from 'react-draft-wysiwyg'\r\nimport draftToHtml from 'draftjs-to-html'\r\nimport htmlToDraft from 'html-to-draftjs'\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class RichTextEditor extends Component {\r\n    /*state = {\r\n        editorState: EditorState.createEmpty(),  // 创建一个没有内容的编辑对象\r\n    }*/\r\n    static propsType = {\r\n        detail: PropTypes.string\r\n    }\r\n    constructor(props) {\r\n        super(props)\r\n        const html = props.detail\r\n        if(html) {  // 如果有值, 根据html格式字符串创建一个对应的编辑对象\r\n            const contentBlock = htmlToDraft(html)\r\n            const contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks)\r\n            const editorState = EditorState.createWithContent(contentState)\r\n            this.state = {\r\n                editorState,\r\n            }\r\n        } else {\r\n            this.state = {\r\n                editorState: EditorState.createEmpty(),  // 创建一个没有内容的编辑对象\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // 输入过程中实时的回调\r\n    onEditorStateChange = (editorState) => {\r\n        this.setState({\r\n            editorState,\r\n        })\r\n    }\r\n\r\n    // 图片上传的回调函数\r\n    uploadImageCallBack = (file) => {\r\n        return new Promise((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest()\r\n            xhr.open('POST', '/manage/img/upload')\r\n            const data = new FormData()\r\n            data.append('image', file)\r\n            xhr.send(data)\r\n            xhr.addEventListener('load', () => {\r\n                const response = JSON.parse(xhr.responseText)\r\n                const url = response.data.url // 得到图片的url\r\n                resolve({data: {link: url}})\r\n            })\r\n            xhr.addEventListener('error', () => {\r\n                const error = JSON.parse(xhr.responseText)\r\n                reject(error)\r\n            })\r\n        })\r\n    }\r\n\r\n    // 返回输入数据对应的html格式的文本\r\n    getDetail = ()=>{\r\n        return draftToHtml(convertToRaw(this.state.editorState.getCurrentContent()))\r\n    }\r\n\r\n    render() {\r\n        const { editorState } = this.state\r\n        return (\r\n            <div>\r\n                <Editor editorState={editorState} editorStyle={{border:'1px solid #aaa', minHeight:200, padding:'0 10px'}}\r\n                        onEditorStateChange={this.onEditorStateChange}\r\n                        toolbar={{\r\n                            image: { uploadCallback: this.uploadImageCallBack, alt: { present: true, mandatory: true } },\r\n                        }}\r\n                />\r\n\r\n                {/*<textarea disabled value={draftToHtml(convertToRaw(editorState.getCurrentContent()))} style={{width:'100%'}}/>*/}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","/**\r\n * Product的添加和更新的子路由组件\r\n */\r\nimport React, {Component} from 'react'\r\nimport { Card, Form, Input, Cascader, Button, Icon, message } from 'antd'\r\nimport LinkButton from '../../../../../components/link-button/LinkButton'\r\nimport { reqCategoryList, reqAddUpdateProduct } from '../../../../../api/index'\r\nimport PicturesWall from './pictures-wall'\r\nimport RichTextEditor from './rich-text-editor'\r\nimport memoryUtils from \"../../../../../utils/memoryUtils\";\r\nconst { Item } = Form\r\nconst { TextArea } = Input\r\n\r\nclass ProductAddUpdate extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        // 创建用来保存ref标识的标签对象的容器\r\n        this.pw= React.createRef()\r\n        this.editor = React.createRef()\r\n    }\r\n    state = {\r\n        options: []\r\n    }\r\n\r\n    // 验证价格的自定义验证函数\r\n    validatePrice = (rule, value, callback)=>{\r\n        // console.log(rule, value, callback)\r\n        if(value*1>0) {  // 验证通过\r\n            callback()\r\n        } else { // 验证没通过\r\n            callback('价格必须大于0')\r\n        }\r\n    }\r\n\r\n    initOptions = async (categoryList)=>{\r\n        const options = categoryList.map(item=>{  // 根据categoryList生成options数组\r\n            return {\r\n                value: item._id,\r\n                label: item.name,\r\n                isLeaf: false // 不是叶子\r\n            }\r\n        })\r\n\r\n        // 如果是一个二级分类商品的更新\r\n        const {isUpdate, product} = this\r\n        const {pCategoryId} = product\r\n        if(isUpdate && pCategoryId!=='0') {\r\n            const subCategoryList = await this.getCategoryList(pCategoryId)  // 获取对应的二级分类列表\r\n            const childrenOptions = subCategoryList.map(item=>{  // 生成二级下拉列表的options\r\n                return {\r\n                    label: item.name,\r\n                    value: item._id,\r\n                    isLeaf: true\r\n                }\r\n            })\r\n            const targetOption = options.find(option=>option.value===pCategoryId)  // 找到当前商品对应的一级option对象\r\n            targetOption.children = childrenOptions  // 关联对应的一级option上\r\n        }\r\n\r\n        this.setState({  // 更新options状态\r\n            options: options\r\n        })\r\n    }\r\n\r\n    // 异步获取一级/二级分类列表, 并显示   -- async函数的返回值是一个新的promise对象, promise的结果和值由async函数的结果来决定\r\n    getCategoryList = async (parentId)=>{\r\n        const result = await reqCategoryList(parentId)\r\n        if(result.status===0) {\r\n            const categoryList = result.data\r\n            if (parentId==='0') {  // 如果是一级分类列表\r\n                this.initOptions(categoryList)\r\n            } else { // 二级列表\r\n                return categoryList  // 返回二级列表 ==> 当前async函数返回的promise就会进入成功状态且value为categoryList\r\n            }\r\n        }\r\n    }\r\n\r\n    // 用加载下一级列表的回调函数\r\n    loadData = async selectedOptions => {\r\n        const targetOption = selectedOptions[selectedOptions.length - 1]  // 得到选择的option对象\r\n        targetOption.loading = true  // 显示loading\r\n\r\n        const subCategoryList = await this.getCategoryList(targetOption.value)  // 根据选中的分类, 请求获取二级分类列表\r\n        targetOption.loading = false  // 隐藏loading\r\n        if(subCategoryList && subCategoryList.length>0) {  // 二级分类数组有数据\r\n            const childrenOptions = subCategoryList.map(item=>{\r\n                return {\r\n                    label: item.name,\r\n                    value: item._id,\r\n                    isLeaf: true\r\n                }\r\n            })\r\n            targetOption.children = childrenOptions  // 关联到当前option上\r\n        } else {  // 当前选中的分类没有二级分类\r\n            targetOption.isLeaf = true\r\n        }\r\n\r\n        this.setState({  // 更新options状态\r\n            options: [...this.state.options],  // this.state.options里的某一项数据发生了改变\r\n        })\r\n\r\n    }\r\n\r\n    // 提交\r\n    submit = ()=>{\r\n        this.props.form.validateFields(async (error, values)=>{  // 进行表单验证, 如果通过了, 才发送请求\r\n            if(!error) {\r\n                // 1. 收集数据, 并封装成product对象\r\n                const {name, desc, price, categoryIds} = values\r\n                let pCategoryId, categoryId\r\n                if(categoryIds.length===1) {\r\n                    pCategoryId = '0'\r\n                    categoryId = categoryIds[0]\r\n                } else {\r\n                    pCategoryId = categoryIds[0]\r\n                    categoryId = categoryIds[1]\r\n                }\r\n                const imgs = this.pw.current.getImgList()\r\n                const detail = this.editor.current.getDetail()\r\n                // console.log('@@@@',values, imgs, detail)\r\n                const product = {\r\n                    name, desc, price, pCategoryId, categoryId, imgs, detail\r\n                }\r\n                if(this.isUpdate) {  // 如果是更新, 需要添加_id\r\n                    product._id = this.product._id\r\n                }\r\n\r\n                // 2. 调用接口请求函数去添加/更新\r\n                const result = await reqAddUpdateProduct(product)\r\n\r\n                // 3. 根据结果提示\r\n                if (result.status===0) {\r\n                    message.success(`${this.isUpdate ? '更新' : '添加'}商品成功!`)\r\n                    this.props.history.goBack()\r\n                } else {\r\n                    message.error(`${this.isUpdate ? '更新' : '添加'}商品失败!`)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    UNSAFE_componentWillMount() {\r\n        // BrowserRouter\r\n        /*\r\n        const product = this.props.location.state    // 取出携带的state, 如果是添加商品则没值, 否则有值\r\n        // this.isUpdate = !!product  // 保存是否是更新的标识\r\n        // this.product = product || {}  // 保存商品(如果没有, 保存是{})\r\n        if(product) {\r\n            this.isUpdate = true\r\n            this.product = product\r\n        } else{\r\n            this.isUpdate = false\r\n            this.product = {}\r\n        }\r\n        */\r\n\r\n\r\n        // HashRouter\r\n        const product = memoryUtils.product\r\n        this.isUpdate = !!product._id  // 保存是否是更新的标识\r\n        this.product = product || {}  // 保存商品(如果没有, 保存是{})\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getCategoryList('0')\r\n    }\r\n    // 在卸载之前清除保存的数据\r\n    componentWillUnmount() {\r\n        // HashRouter\r\n        memoryUtils.product = {}\r\n    }\r\n\r\n    render() {\r\n        const {isUpdate, product} = this\r\n        const {pCategoryId, categoryId, imgs, detail} = product\r\n        const categoryIds = []  // 用来接收级联分类ID的数组\r\n        if(isUpdate) {\r\n            if(pCategoryId==='0') {  // 商品是一个一级分类的商品\r\n                categoryIds.push(categoryId)\r\n            } else {  // 商品是一个二级分类的商品\r\n                categoryIds.push(pCategoryId)\r\n                categoryIds.push(categoryId)\r\n            }\r\n        }\r\n\r\n        const title = (  // 头部左侧标题\r\n            <span>\r\n                <LinkButton onClick={()=>{this.props.history.goBack()}}>\r\n                    <Icon type=\"arrow-left\" style={{fontSize:16}}/>\r\n                </LinkButton>\r\n                <span>{ this.isUpdate ? '修改商品' : '添加商品'}</span>\r\n            </span>\r\n        )\r\n        const formItemLayout = {  // 指定Item布局的配置对象\r\n            labelCol: { span: 4 },   // 左侧label的宽度\r\n            wrapperCol: { span: 10 }  // 右侧包裹的宽度\r\n        }\r\n\r\n        const {getFieldDecorator} = this.props.form\r\n        return (\r\n            <Card title={title}>\r\n                <Form {...formItemLayout}>\r\n                    <Item label=\"商品名称\">\r\n                        {\r\n                            getFieldDecorator('name', {\r\n                                rules: [{required: true, message: '必须输入商品名称'}],\r\n                                initialValue: product.name\r\n                            })(\r\n                                <Input placeholder=\"请输入商品名称\"/>\r\n                            )\r\n                        }\r\n                    </Item>\r\n                    <Item label=\"商品描述\">\r\n                        {\r\n                            getFieldDecorator('desc', {\r\n                                rules: [{required: true, message: '必须输入商品描述'}],\r\n                                initialValue: product.desc\r\n                            })(\r\n                                <TextArea placeholder=\"请输入商品描述\" autosize={{ minRows: 1, maxRows: 6 }}/>\r\n                            )\r\n                        }\r\n                    </Item>\r\n                    <Item label=\"商品价格\">\r\n                        {\r\n                            getFieldDecorator('price', {\r\n                                rules: [\r\n                                    {required: true, message: '必须输入商品价格'},\r\n                                    {validator: this.validatePrice}\r\n                                ],\r\n                                initialValue: product.price\r\n                            })(\r\n                                <Input type=\"number\" addonAfter=\"元\" placeholder=\"请输入商品价格\"/>\r\n                            )\r\n                        }\r\n                    </Item>\r\n                    <Item label=\"商品分类\">\r\n                        {\r\n                            getFieldDecorator('categoryIds', {\r\n                                rules: [{required: true, message: '必须指定商品分类'}],\r\n                                initialValue: categoryIds\r\n                            })(\r\n                                <Cascader options={this.state.options}   /*需要显示的列表数据数组*/\r\n                                          loadData={this.loadData}  /*当选择某个列表项, 加载下一级列表的监听回调*/\r\n                                          placeholder=\"请指定商品分类\"/>\r\n                            )\r\n                        }\r\n                    </Item>\r\n                    <Item label=\"商品图片\" labelCol={{span: 4}} wrapperCol={{span: 16}}>\r\n                        <PicturesWall ref={this.pw} imgs={imgs}/>\r\n                    </Item>\r\n                    <Item label=\"商品详情\" labelCol={{span: 4}} wrapperCol={{span: 16}}>\r\n                        <RichTextEditor ref={this.editor} detail={detail}/>\r\n                    </Item>\r\n                    <Item wrapperCol={{span:10, offset: 4}}>\r\n                        <Button type=\"primary\" onClick={this.submit}>提交</Button>\r\n                    </Item>\r\n                </Form>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\nexport default Form.create()(ProductAddUpdate)\r\n\r\n\r\n/*\r\n1. 子组件调用父组件的方法: 将父组件的方法以函数属性的形式传递给子组件, 子组件就可以调用\r\n2. 父组件调用子组件的方法: 在父组件中通过ref得到子组件标签对象(也就是组件对象), 调用其方法\r\n    使用ref:\r\n        1. 创建ref容器: this.pw = React.createRef()\r\n        2. 将ref容器交给需要获取的标签元素: <PictureWall ref={this.pw} />\r\n        3. 通过ref容器读取标签元素: this.pw.current\r\n */\r\n\r\n/*\r\nclass ProductAddUpdate extends Component {\r\n    state = {\r\n        fileList: [],\r\n        options: [\r\n            {\r\n                value: 'zhejiang',\r\n                label: 'Zhejiang',\r\n                isLeaf: false,\r\n            },\r\n            {\r\n                value: 'jiangsu',\r\n                label: 'Jiangsu',\r\n                isLeaf: false,\r\n            },\r\n            {\r\n                value: 'jiangsu',\r\n                label: 'Jiangsu',\r\n                isLeaf: true,\r\n            },\r\n        ]\r\n    }\r\n\r\n    // 验证价格的自定义验证函数\r\n    validatePrice = (rule, value, callback)=>{\r\n        console.log(rule, value, callback)\r\n        if(value*1>0) {  // 验证通过\r\n            callback()\r\n        } else { // 验证没通过\r\n            callback('价格必须大于0')\r\n        }\r\n    }\r\n\r\n    // 用加载下一级列表的回调函数\r\n    loadData = selectedOptions => {\r\n        const targetOption = selectedOptions[selectedOptions.length - 1]  // 得到选择的option对象\r\n        targetOption.loading = true  // 显示loading\r\n\r\n        setTimeout(() => {  // 模拟请求异步获取二级列表数据(懒加载)\r\n            targetOption.loading = false  // 隐藏loading\r\n            targetOption.children = [\r\n                {\r\n                    label: `${targetOption.label} Dynamic 1`,\r\n                    value: 'dynamic1',\r\n                    isLeaf: true\r\n                },\r\n                {\r\n                    label: `${targetOption.label} Dynamic 2`,\r\n                    value: 'dynamic2',\r\n                    isLeaf: true\r\n                },\r\n            ];\r\n            this.setState({  // 更新options状态\r\n                options: [...this.state.options],  // this.state.options里的某一项数据发生了改变\r\n            });\r\n        }, 1000);\r\n    };\r\n\r\n    // 提交\r\n    submit = ()=>{\r\n        this.props.form.validateFields(async (error, values)=>{  // 进行表单验证, 如果通过了, 才发送请求\r\n            if(!error) {\r\n                message.success('验证成功')\r\n            }\r\n        })\r\n    }\r\n    render() {\r\n        const { fileList } = this.state\r\n        const title = (  // 头部左侧标题\r\n            <span>\r\n                <LinkButton>\r\n                    <Icon type=\"arrow-left\" style={{fontSize:16}}/>\r\n                </LinkButton>\r\n                <span>添加商品</span>\r\n            </span>\r\n        )\r\n        const formItemLayout = {  // 指定Item布局的配置对象\r\n            labelCol: { span: 2 },   // 左侧label的宽度\r\n            wrapperCol: { span: 10 }  // 右侧包裹的宽度\r\n        }\r\n        const uploadButton = (\r\n            <div>\r\n                <Icon type=\"plus\" />\r\n                <div className=\"ant-upload-text\">Upload</div>\r\n            </div>\r\n        )\r\n        const {getFieldDecorator} = this.props.form\r\n        return (\r\n            <Card title={title}>\r\n                <Form {...formItemLayout}>\r\n                    <Item label=\"商品名称：\">\r\n                        {\r\n                            getFieldDecorator('name', {\r\n                                rules: [{required: true, message: '必须输入商品名称'}],\r\n                                initialValue: ''\r\n                            })(\r\n                                <Input placeholder=\"请输入商品名称\"/>\r\n                            )\r\n                        }\r\n                    </Item>\r\n                    <Item label=\"商品描述：\">\r\n                        {\r\n                            getFieldDecorator('desc', {\r\n                                rules: [{required: true, message: '必须输入商品描述'}],\r\n                                initialValue: ''\r\n                            })(\r\n                                <TextArea placeholder=\"请输入商品描述\" autosize={{ minRows: 1, maxRows: 6 }}/>\r\n                            )\r\n                        }\r\n                    </Item>\r\n                    <Item label=\"商品价格：\">\r\n                        {\r\n                            getFieldDecorator('price', {\r\n                                rules: [\r\n                                    {required: true, message: '必须输入商品价格'},\r\n                                    {validator: this.validatePrice}\r\n                                ],\r\n                                initialValue: ''\r\n                            })(\r\n                                <Input type=\"number\" addonAfter=\"元\" placeholder=\"请输入商品价格\"/>\r\n                            )\r\n                        }\r\n                    </Item>\r\n                    <Item label=\"商品分类：\">\r\n                        {\r\n                            getFieldDecorator('categoryIds', {\r\n                                rules: [{required: true, message: '必须指定商品分类'}],\r\n                                initialValue: []\r\n                            })(\r\n                                <Cascader options={this.state.options}   /!*需要显示的列表数据数组*!/\r\n                                          loadData={this.loadData}  /!*当选择某个列表项, 加载下一级列表的监听回调*!/\r\n                                          placeholder=\"请指定商品分类\"/>\r\n                            )\r\n                        }\r\n                    </Item>\r\n                    <Item label=\"商品图片：\">\r\n                        <Upload\r\n                            action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\r\n                            listType=\"picture-card\"\r\n                            fileList={fileList}\r\n                            onPreview={this.handlePreview}\r\n                            onChange={this.handleChange}\r\n                        >\r\n                            {fileList.length >= 8 ? null : uploadButton}\r\n                        </Upload>\r\n                    </Item>\r\n                    <Item label=\"商品详情：\">\r\n                        <Input/>\r\n                    </Item>\r\n                    <Item>\r\n                        <Button type=\"primary\" onClick={this.submit}>提交</Button>\r\n                    </Item>\r\n                </Form>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\nexport default Form.create()(ProductAddUpdate)*/\r\n","/**\r\n * Product的详情子路由组件\r\n */\r\nimport React, {Component} from 'react'\r\nimport { Card, Icon, List } from 'antd'\r\nimport LinkButton from '../../../../../components/link-button/LinkButton'\r\nimport {BASE_IMG_URL} from '../../../../../utils/constants'\r\nimport { reqCategory } from '../../../../../api/index'\r\nimport memoryUtils from '../../../../../utils/memoryUtils'\r\nconst Item = List.Item\r\n\r\nexport default class ProductDetail extends Component {\r\n    state = {\r\n        cName1: '', // 一级分类名称\r\n        cName2: '', // 二级分类名称\r\n    }\r\n\r\n    async componentDidMount() {\r\n        // BrowserRouter\r\n        // const {pCategoryId, categoryId} = this.props.location.state.product  // 得到当前商品的分类ID\r\n        // HashRouter\r\n        const {pCategoryId, categoryId} = memoryUtils.product\r\n\r\n        if(pCategoryId === '0') {\r\n            const result = await reqCategory(categoryId)\r\n            if(result.status === 0) { // 一级分类下的商品\r\n                this.setState({\r\n                    cName1: result.data.name\r\n                })\r\n            }\r\n        } else { // 二级分类下的商品\r\n            /*//通过多个await方式发多个请求: 后面一个请求是在前一个请求成功返回之后才发送，效率较低\r\n            const result1 = await reqCategory(pCategoryId) // 获取一级分类列表\r\n            const result2 = await reqCategory(categoryId) // 获取二级分类\r\n            if(result1.status===0 && result2.status===0) {\r\n                this.setState({\r\n                    cName1: result1.data.name,\r\n                    cName2: result2.data.name\r\n                })\r\n            }*/\r\n\r\n            // 一次性发送多个请求, 只有都成功了, 才正常处理\r\n            const results = await Promise.all([reqCategory(pCategoryId), reqCategory(categoryId)])\r\n            // console.log(results)\r\n            const cName1 = results[0].data.name\r\n            const cName2 = results[1].data.name\r\n            this.setState({\r\n                cName1,\r\n                cName2\r\n            })\r\n        }\r\n    }\r\n    // 在卸载之前清除保存的数据\r\n    componentWillUnmount() {\r\n        // HashRouter\r\n        memoryUtils.product = {}\r\n    }\r\n\r\n    render() {\r\n        const {cName1 , cName2} = this.state\r\n        // let cName = cName2==='' ? cName1 : cName1+' --> '+cName2\r\n\r\n        // BrowserRouter\r\n        // const { name, desc, price, detail, imgs } = this.props.location.state.product\r\n        // HashRouter\r\n        const { name, desc, price, detail, imgs } = memoryUtils.product\r\n\r\n        const title= (\r\n            <span>\r\n                <LinkButton>\r\n                    <Icon type=\"arrow-left\" style={{marginRight: 10, fontSize: 16, color:'green'}}\r\n                        onClick={()=>{this.props.history.goBack()}}/>\r\n                </LinkButton>\r\n                <span>商品详情</span>\r\n            </span>\r\n        )\r\n\r\n        return (\r\n            <Card title={title} className=\"product-detail\">\r\n                <List>\r\n                    <Item>\r\n                        <span className=\"left\">商品名称:</span>\r\n                        <span>{name}</span>\r\n                    </Item>\r\n                    <Item>\r\n                        <span className=\"left\">商品描述:</span>\r\n                        <span>{desc}</span>\r\n                    </Item>\r\n                    <Item>\r\n                        <span className=\"left\">商品价格:</span>\r\n                        <span>{price}元</span>\r\n                    </Item>\r\n                    <Item>\r\n                        <span className=\"left\">所属分类:</span>\r\n                        {/*<span>{cName}</span>*/}\r\n                        <span>{cName1} {cName2 ? '--> '+cName2 : ''}</span>\r\n                    </Item>\r\n                    <Item>\r\n                        <span className=\"left\">商品图片:</span>\r\n                        <span>\r\n                            {\r\n                                imgs.map((img,index)=><img src={BASE_IMG_URL + img} key={index} alt=\"商品图片\" className=\"product-img\"/>)\r\n                            }\r\n                        </span>\r\n                    </Item>\r\n                    <Item>\r\n                        <span className=\"left\">商品详情:</span>\r\n                        <span dangerouslySetInnerHTML={{__html: detail}}>\r\n                        </span>\r\n                    </Item>\r\n                </List>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n/*\r\nexport default class ProductDetail extends Component {\r\n    render() {\r\n        const title= (\r\n            <span>\r\n                <LinkButton>\r\n                    <Icon type=\"arrow-left\" style={{marginRight: 10, fontSize: 16, color:'green'}}\r\n                          onClick={()=>{this.props.history.goBack()}}/>\r\n                </LinkButton>\r\n                <span>商品详情</span>\r\n            </span>\r\n        )\r\n        return (\r\n            <Card title={title} className=\"product-detail\">\r\n                <List>\r\n                    <Item>\r\n                        <span className=\"left\">商品名称:</span>\r\n                        <span>联想ThinkPad 翼4809</span>\r\n                    </Item>\r\n                    <Item>\r\n                        <span className=\"left\">商品描述:</span>\r\n                        <span>年度重量级新品，X390、T490全新登场 更加轻薄机身设计9</span>\r\n                    </Item>\r\n                    <Item>\r\n                        <span className=\"left\">商品价格:</span>\r\n                        <span>6300元</span>\r\n                    </Item>\r\n                    <Item>\r\n                        <span className=\"left\">所属分类:</span>\r\n                        <span>电脑 --> 笔记本</span>\r\n                    </Item>\r\n                    <Item>\r\n                        <span className=\"left\">商品图片:</span>\r\n                        <span>\r\n                            <img src=\"/images/computer01.png\" alt=\"\" className=\"product-img\"/>\r\n                            <img src=\"/images/computer02.png\" alt=\"\" className=\"product-img\"/>\r\n                        </span>\r\n                    </Item>\r\n                    <Item>\r\n                        <span className=\"left\">商品详情:</span>\r\n                        <span dangerouslySetInnerHTML={{__html:\r\n                                \"<span style='color:red;'>15.6英寸家用轻薄便携商务办公手提笔记本电脑 E2-9010/4G/128G固态 2G独显 内置</span>\"\r\n                        }}>\r\n                        </span>\r\n                    </Item>\r\n                </List>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n*/\r\n","/**\r\n * 商品路由\r\n */\r\nimport React, {Component} from 'react'\r\nimport { Switch, Route, Redirect } from 'react-router-dom'\r\nimport ProductHome from './pages/home'\r\nimport ProductAddUpdate from './pages/add-update'\r\nimport ProductDetail from './pages/detail'\r\nimport './product.less'\r\n\r\nexport default class Product extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Switch>\r\n                <Route exact path='/product' component={ProductHome}></Route> {/*路径完全匹配*/}\r\n                <Route path='/product/add_update' component={ProductAddUpdate}></Route>\r\n                <Route path='/product/detail' component={ProductDetail}></Route>\r\n                <Redirect to='/product'/>\r\n            </Switch>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\nimport {Form, Input} from 'antd'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass AddForm extends Component {\r\n    static propTypes = {\r\n        setForm: PropTypes.func.isRequired, // 用来传递form对象的函数\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setForm(this.props.form)\r\n    }\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form\r\n        const formItemLayout = {  // 指定Item布局的配置对象\r\n            labelCol: { span: 4 },   // 左侧label的宽度\r\n            wrapperCol: { span: 20 }  // 右侧包裹的宽度\r\n        }\r\n        return (\r\n            <Form {...formItemLayout}>\r\n                <Form.Item label=\"角色名称\">\r\n                    {getFieldDecorator('roleName', {\r\n                        rules: [{required: true, message: '角色名称不能为空!'}],\r\n                        initialValue: ''\r\n                    })(\r\n                        <Input placeholder=\"请输入角色名称\"/>\r\n                    )\r\n                    }\r\n                </Form.Item>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\nexport default Form.create()(AddForm)\r\n","import React, {Component} from 'react'\r\nimport {Form, Input, Tree} from 'antd'\r\nimport PropTypes from 'prop-types'\r\nimport menuList from '../../../../../config/menuConfig'\r\nconst { TreeNode } = Tree\r\n\r\nexport default class AuthForm extends Component {\r\n    static propTypes = {\r\n        role: PropTypes.object.isRequired\r\n    }\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        const {menus} = this.props.role  // 根据传入角色的menus生成初始状态\r\n        this.state = {\r\n            checkedKeys: menus\r\n        }\r\n    }\r\n\r\n    getTreeNodes = (menuList)=>{\r\n        /*return menuList.map(menu=>{\r\n            return (\r\n                <TreeNode title={menu.title} key={menu.key}>\r\n                    {\r\n                        (menu.children && menu.children.length>0) ? this.getTreeNodes(menu.children) : null\r\n                    }\r\n                </TreeNode>\r\n            )\r\n        })*/\r\n        return menuList.reduce((pre, item)=>{\r\n            pre.push(\r\n                <TreeNode title={item.title} key={item.key}>\r\n                    {\r\n                        (item.children && item.children.length>0) ? this.getTreeNodes(item.children) : null\r\n                    }\r\n                </TreeNode>\r\n            )\r\n            return pre\r\n        }, [])\r\n    }\r\n\r\n    // 选中某个Node时的回调\r\n    onCheck = checkedKeys => {\r\n        console.log('onCheck', checkedKeys);\r\n        this.setState({ checkedKeys });\r\n    }\r\n\r\n    // 为父组件提交获取最新menus数据的方法\r\n    getMenus = ()=>this.state.checkedKeys\r\n\r\n\r\n    UNSAFE_componentWillMount() {\r\n        this.treeNodes = this.getTreeNodes(menuList)\r\n    }\r\n\r\n    // 根据新传入的role来更新checkedKeys状态\r\n    UNSAFE_componentWillReceiveProps(nextProps, nextContext) {\r\n        // 当组件接收到新的属性时自动调用\r\n        // console.log('componentWillReceiveProps()', nextProps, nextContext)\r\n        const menus = nextProps.role.menus\r\n        this.setState({\r\n            checkedKeys: menus\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {role} = this.props\r\n        const { checkedKeys } = this.state\r\n        const formItemLayout = {  // 指定Item布局的配置对象\r\n            labelCol: { span: 4 },   // 左侧label的宽度\r\n            wrapperCol: { span: 20 }  // 右侧包裹的宽度\r\n        }\r\n        return (\r\n            <div>\r\n                <Form.Item label=\"角色名称\" {...formItemLayout}>\r\n                    <Input value={role.name} disabled/>\r\n                </Form.Item>\r\n\r\n                <Tree checkable defaultExpandAll={true} checkedKeys={checkedKeys} onCheck={this.onCheck}>\r\n                    <TreeNode title=\"平台权限\" key=\"all\">\r\n                        {this.treeNodes}\r\n                    </TreeNode>\r\n                </Tree>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","/**\r\n * 角色路由\r\n */\r\nimport React, {Component} from 'react'\r\nimport { Card, Button, Table, Modal, message } from 'antd'\r\nimport {formatDate}  from '../../../../utils/dateUtils'\r\nimport { reqRoleList, reqAddRole, reqUpdateRole } from '../../../../api'\r\nimport AddForm from './components/add-form'\r\nimport AuthForm from './components/auth-form'\r\nimport memoryUtils from '../../../../utils/memoryUtils'\r\nimport storageUtils from '../../../../utils/storageUtils'\r\n\r\nexport default class Role extends Component {\r\n    state = {\r\n        roles: [], // 所有角色的列表\r\n        role: {}, // 选中的role\r\n        isShowAdd: false, // 是否显示添加界面\r\n        isShowAuth: false, // 是否显示设置权限界面\r\n    }\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.auth = React.createRef()\r\n    }\r\n\r\n    // 初始化表格的列项\r\n    initColumns = ()=>{\r\n        this.columns = [\r\n            {\r\n                title: '角色名称',\r\n                dataIndex: 'name'\r\n            },\r\n            {\r\n                title: '创建时间',\r\n                dataIndex: 'create_time',\r\n                render: (time) => formatDate(time)\r\n            },\r\n            {\r\n                title: '授权时间',\r\n                dataIndex: 'auth_time',\r\n                // render: (time) => formatDate(time)\r\n                render: formatDate\r\n            },\r\n            {\r\n                title: '授权人',\r\n                dataIndex: 'auth_name'\r\n            }\r\n        ]\r\n    }\r\n    // 获取角色列表\r\n    getRoleList = async ()=>{\r\n        const result = await reqRoleList()\r\n        if(result.status===0) {\r\n            this.setState({\r\n                roles: result.data\r\n            })\r\n        }\r\n    }\r\n\r\n    // 设置表格的行属性\r\n    onRow = (role)=>{\r\n        return {\r\n            onClick: event => { // 点击行\r\n                this.setState({\r\n                    role: role\r\n                })\r\n            },\r\n        }\r\n    }\r\n\r\n    handleAddCancel = ()=>{\r\n        this.setState({isShowAdd: false})\r\n        this.addForm.resetFields()\r\n    }\r\n    // 添加角色\r\n    addRole = ()=>{\r\n        this.addForm.validateFields(async (error, values)=>{\r\n            if(!error) {\r\n                this.setState({  // 隐藏确认框\r\n                    isShowAdd: false\r\n                })\r\n                const roleName = values.roleName\r\n                this.addForm.resetFields()\r\n                const result = await reqAddRole(roleName)\r\n                if(result.status===0) {  // 根据结果提示/更新列表显示\r\n                    message.success('添加角色成功!')\r\n\r\n                    // this.getRoleList()\r\n\r\n                    const role = result.data  // 新产生的角色\r\n                    this.setState(state=>({  // 更新roles状态: 基于原本状态数据更新\r\n                        roles: [...state.roles, role]\r\n                    }))\r\n\r\n                } else {\r\n                    message.success('添加角色失败!')\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    handleUpdateCancel = ()=>{\r\n        this.setState({isShowAuth: false})\r\n    }\r\n    // 设置角色权限\r\n    updateRole = async ()=>{\r\n        this.setState({  // 隐藏确认框\r\n            isShowAuth: false\r\n        })\r\n\r\n        const role = this.state.role\r\n        const menus = this.auth.current.getMenus()  // 得到最新的menus\r\n        role.menus = menus\r\n        role.auth_time = Date.now()\r\n        role.auth_name = memoryUtils.user.username\r\n        const result = await reqUpdateRole(role)\r\n        if(result.status === 0) {\r\n            // this.getRoleList()  // 更新数据\r\n            // message.success('设置角色权限成功')\r\n\r\n            if(role._id === memoryUtils.user.role_id) {  // 如果当前更新的是自己角色的权限, 强制退出\r\n                memoryUtils.user = {}\r\n                storageUtils.removeUser()\r\n                this.props.history.replace('/login')\r\n                message.success('当前用户角色权限修改了,请重新登录！')\r\n            } else {\r\n                message.success('设置角色权限成功！')\r\n                this.setState({\r\n                    roles: [...this.state.roles]\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    UNSAFE_componentWillMount() {\r\n        this.initColumns()\r\n    }\r\n    componentDidMount() {\r\n        this.getRoleList()\r\n    }\r\n\r\n    render() {\r\n        const {roles, role, isShowAdd, isShowAuth} = this.state\r\n        const title = (\r\n            <span>\r\n                <Button type=\"primary\" onClick={()=>this.setState({isShowAdd: true})}>创建角色</Button> &nbsp;&nbsp;\r\n                <Button type=\"primary\" disabled={!role._id} onClick={()=>this.setState({isShowAuth: true})}>设置角色权限</Button>\r\n            </span>\r\n        )\r\n\r\n        return (\r\n            <Card title={title}>\r\n                <Table bordered rowKey=\"_id\" dataSource={roles} columns={this.columns}\r\n                       onRow={this.onRow}  /*设置行属性*/\r\n                       rowSelection={{  /*表格行是否可选择*/\r\n                           type: 'radio',\r\n                           selectedRowKeys: [role._id],  /*指定选中项的 key 数组*/\r\n                           onSelect: (role) => { this.setState({ role }) } // 选择某个radio时回调\r\n                       }}\r\n                       pagination={{\r\n                           defaultPageSize: 5, defaultCurrent: 1,\r\n                           showSizeChanger:true, pageSizeOptions: ['5','10','20','40'],\r\n                           showQuickJumper: true\r\n                       }}/>\r\n\r\n                <Modal title=\"添加角色\" visible={isShowAdd} onOk={this.addRole} onCancel={this.handleAddCancel}>\r\n                    <AddForm setForm={(form) => {this.addForm = form}} />\r\n                </Modal>\r\n                <Modal title=\"设置角色权限\" visible={isShowAuth} onOk={this.updateRole} onCancel={this.handleUpdateCancel}>\r\n                    <AuthForm ref={this.auth} role={role}/>\r\n                </Modal>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n","import React, {PureComponent} from 'react'\r\nimport {Form, Input, Select} from 'antd'\r\nimport PropTypes from 'prop-types'\r\nconst Option = Select.Option\r\n\r\nclass UserForm extends PureComponent {\r\n    static propTypes = {\r\n        setForm: PropTypes.func.isRequired, // 用来传递form对象的函数\r\n        roles: PropTypes.array.isRequired,\r\n        user: PropTypes.object.isRequired\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setForm(this.props.form)\r\n    }\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form\r\n        const { roles, user } = this.props\r\n        const formItemLayout = {  // 指定Item布局的配置对象\r\n            labelCol: { span: 4 },   // 左侧label的宽度\r\n            wrapperCol: { span: 20 }  // 右侧包裹的宽度\r\n        }\r\n        return (\r\n            <Form {...formItemLayout}>\r\n                <Form.Item label=\"用户名\">\r\n                    {getFieldDecorator('username', {\r\n                            rules: [{required: true, message: '用户名不能为空!'}],\r\n                            initialValue: user.username\r\n                        })(\r\n                            <Input placeholder=\"请输入用户名\"/>\r\n                        )\r\n                    }\r\n                </Form.Item>\r\n                {\r\n                    user._id ? null : (\r\n                        <Form.Item label=\"密码\">\r\n                            {getFieldDecorator('password', {\r\n                                    rules: [{required: true, message: '密码不能为空!'}],\r\n                                    initialValue: ''\r\n                                })(\r\n                                    <Input type=\"password\" placeholder=\"请输入密码\"/>\r\n                                )\r\n                            }\r\n                        </Form.Item>\r\n                    )\r\n                }\r\n                <Form.Item label=\"电话\">\r\n                    {getFieldDecorator('phone', {\r\n                            rules: [{required: true, message: '电话不能为空!'}],\r\n                            initialValue: user.phone\r\n                        })(\r\n                            <Input placeholder=\"请输入电话\"/>\r\n                        )\r\n                    }\r\n                </Form.Item>\r\n                <Form.Item label=\"邮箱\">\r\n                    {getFieldDecorator('email', {\r\n                            rules: [{required: true, message: '邮箱不能为空!'}],\r\n                            initialValue: user.email\r\n                        })(\r\n                            <Input placeholder=\"请输入邮箱\"/>\r\n                        )\r\n                    }\r\n                </Form.Item>\r\n                <Form.Item label=\"所属角色\">\r\n                    {getFieldDecorator('role_id', {\r\n                            rules: [{required: true, message: '所属角色不能为空!'}],\r\n                            initialValue: user.role_id\r\n                        })(\r\n                            <Select placeholder=\"请指定所属角色\">\r\n                                {\r\n                                    roles.map(role=>(<Option value={role._id} key={role._id}>{role.name}</Option>))\r\n                                }\r\n                            </Select>\r\n                        )\r\n                    }\r\n                </Form.Item>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form.create()(UserForm)\r\n","/**\r\n * 用户管理路由\r\n */\r\nimport React, {Component} from 'react'\r\nimport { Card, Button, Table, Modal, message } from 'antd'\r\nimport UserForm from './components/user-form'\r\nimport {formatDate} from '../../../../utils/dateUtils'\r\nimport LinkButton from '../../../../components/link-button/LinkButton'\r\nimport {reqUserList, reqDeleteUser, reqAddOrUpdateUser} from '../../../../api'\r\n\r\nexport default class User extends Component {\r\n\r\n    state = {\r\n        users: [], // 所有用户列表\r\n        roles: [], // 所有角色列表\r\n        isShow: false, // 是否显示确认框\r\n    }\r\n    initColumns = ()=>{\r\n        this.columns = [\r\n            {\r\n                title: '用户名',\r\n                dataIndex: 'username'\r\n            },\r\n            {\r\n                title: '邮箱',\r\n                dataIndex: 'email',\r\n            },\r\n            {\r\n                title: '电话',\r\n                dataIndex: 'phone',\r\n            },\r\n            {\r\n                title: '注册时间',\r\n                dataIndex: 'create_time',\r\n                // render: (time) => formatDate(time)\r\n                render: formatDate\r\n            },\r\n            {\r\n                title: '所属角色',\r\n                dataIndex: 'role_id',\r\n                /*render: (role_id)=>{\r\n                    return this.state.roles.find(role=>role._id===role_id).name\r\n                    // const roles = this.state.roles\r\n                    // for(let i=0; i<roles.length; i++) {\r\n                    //     if(roles[i]._id===role_id) {\r\n                    //         return <span>{roles[i].name}</span>\r\n                    //     }\r\n                    // }\r\n                    // return null\r\n                }*/\r\n                render: (role_id)=>this.roleNames[role_id]\r\n            },\r\n            {\r\n                title: '操作',\r\n                render: (user)=>{\r\n                    return (\r\n                        <span>\r\n                            <LinkButton onClick={()=>this.showUpdate(user)}>修改</LinkButton>\r\n                            <LinkButton onClick={()=>this.deleteUser(user)}>删除</LinkButton>\r\n                        </span>\r\n                    )\r\n                }\r\n            }\r\n        ]\r\n    }\r\n\r\n    getUserList = async ()=>{\r\n        const result = await reqUserList()\r\n        if(result.status===0) {\r\n            const {users, roles} = result.data\r\n            this.initRoleNames(roles)\r\n            this.setState({\r\n                users,\r\n                roles\r\n            })\r\n        }\r\n    }\r\n\r\n    // 根据role的数组, 生成包含所有角色名的对象(属性名用角色id值)\r\n    initRoleNames = (roles) => {\r\n        const roleNames = roles.reduce((pre, role)=>{\r\n            pre[role._id] = role.name\r\n            return pre\r\n        }, {})\r\n        this.roleNames = roleNames\r\n    }\r\n\r\n    // 显示修改界面\r\n    showUpdate = (user)=>{\r\n        this.user = user\r\n        this.setState({\r\n            isShow: true\r\n        })\r\n    }\r\n    // 显示添加界面\r\n    showAdd = ()=>{\r\n        this.user = null  // 去除前面保存的user\r\n        this.setState({isShow: true})\r\n    }\r\n\r\n    // 删除指定用户\r\n    deleteUser = (user)=>{\r\n        Modal.confirm({\r\n            title: `确认删除${user.username}吗?`,\r\n            onOk: async ()=>{\r\n                const result = await reqDeleteUser(user._id)\r\n                if(result.status===0) {\r\n                    message.success('删除用户成功!')\r\n                    this.getUserList()\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    // 添加/更新用户\r\n    addOrUpdateUser = ()=>{\r\n        this.form.validateFields(async (error,values)=>{\r\n            if(!error) {\r\n                this.setState({isShow: false})\r\n\r\n                // 1. 收集输入数据\r\n                const user = values\r\n                this.form.resetFields()\r\n                if(this.user) {  // 如果是更新, 需要给user指定_id属性\r\n                    user._id = this.user._id\r\n                }\r\n\r\n                // 2. 提交添加的请求\r\n                const result = await reqAddOrUpdateUser(user)\r\n\r\n                // 3. 更新列表显示\r\n                if(result.status===0) {\r\n                    message.success(`${this.user ? '修改' : '添加'}用户成功`)\r\n                    this.getUserList()\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    UNSAFE_componentWillMount() {\r\n        this.initColumns()\r\n    }\r\n    componentDidMount() {\r\n        this.getUserList()\r\n    }\r\n\r\n    render() {\r\n        const {users, roles, isShow} = this.state\r\n        const user = this.user || {}\r\n\r\n        const title = <Button type=\"primary\" onClick={this.showAdd}>创建用户</Button>\r\n        return (\r\n            <Card title={title}>\r\n                <Table bordered rowKey=\"_id\" dataSource={users} columns={this.columns}\r\n                       pagination={{\r\n                           defaultPageSize: 5, defaultCurrent: 1,\r\n                           showSizeChanger:true, pageSizeOptions: ['5','10','20','40'],\r\n                           showQuickJumper: true\r\n                       }}/>\r\n\r\n                <Modal title={user._id ? '修改用户' : '添加用户'}\r\n                       visible={isShow} onOk={this.addOrUpdateUser}\r\n                       onCancel={()=>{\r\n                           this.setState({ isShow: false })\r\n                           this.form.resetFields()\r\n                       }}\r\n                >\r\n                    <UserForm roles={roles} user={user} setForm={(form)=>this.form=form}/>\r\n                </Modal>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n","/**\r\n * 后台管理的柱状图路由组件\r\n */\r\nimport React, {Component} from 'react'\r\nimport {Card, Button} from 'antd'\r\nimport ReactEcharts from 'echarts-for-react'\r\n\r\nexport default class Bar extends Component {\r\n    state = {\r\n        sales: [5, 20, 36, 10, 10, 20], // 销量的数组\r\n        stores: [6, 10, 25, 20, 15, 10] // 库存的数组\r\n    }\r\n\r\n    updateData = ()=>{\r\n        this.setState((state)=>({\r\n            sales: state.sales.map(sale=>sale+1),\r\n            stores: state.stores.reduce((pre, store)=>{\r\n                pre.push(store-1)\r\n                return pre\r\n            }, [])\r\n        }))\r\n    }\r\n\r\n    getOption= (sales, stores)=>{\r\n        return {\r\n            title: {\r\n                text: 'ECharts 销量与库存'\r\n            },\r\n            tooltip: {},\r\n            legend: {\r\n                data: ['销量', '库存']\r\n            },\r\n            xAxis: {\r\n                data: ['衬衫', '羊毛衫', '雪纺衫', '裤子', '高跟鞋', '袜子']\r\n            },\r\n            yAxis: {},\r\n            series: [\r\n                {\r\n                    name: '销量',\r\n                    type: 'bar',\r\n                    // data: [5, 20, 36, 10, 10, 20]\r\n                    data: sales\r\n                },\r\n                {\r\n                    name: '库存',\r\n                    type: 'bar',\r\n                    // data: [6, 10, 25, 20, 15, 10]\r\n                    data: stores\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const { sales, stores } = this.state\r\n        return (\r\n            <div>\r\n                <Card>\r\n                    <Button type='primary' onClick={this.updateData}>更新</Button>\r\n                </Card>\r\n\r\n                <Card title='柱状图一'>\r\n                    <ReactEcharts option={this.getOption(sales, stores)} style={{paddingTop:40, height:500}}/>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","/**\r\n * 后台管理的折线图路由组件\r\n */\r\nimport React, {Component} from 'react'\r\nimport {Card, Button} from 'antd'\r\nimport ReactEcharts from 'echarts-for-react'\r\n\r\nexport default class Line extends Component {\r\n    state = {\r\n        sales: [5, 20, 36, 10, 10, 20], // 销量的数组\r\n        stores: [6, 10, 25, 20, 15, 10] // 库存的数组\r\n    }\r\n\r\n    update = ()=>{\r\n        this.setState((state)=>({\r\n            sales: state.sales.map(sale=>sale+1),\r\n            stores: state.stores.reduce((pre, store)=>{\r\n                pre.push(store-1)\r\n                return pre\r\n            }, [])\r\n        }))\r\n    }\r\n\r\n    getOption= (sales, stores)=>{\r\n        return {\r\n            title: {\r\n                text: 'ECharts 销量与库存'\r\n            },\r\n            tooltip: {},\r\n            legend: {\r\n                data: ['销量', '库存']\r\n            },\r\n            xAxis: {\r\n                data: ['衬衫', '羊毛衫', '雪纺衫', '裤子', '高跟鞋', '袜子']\r\n            },\r\n            yAxis: {},\r\n            series: [\r\n                {\r\n                    name: '销量',\r\n                    type: 'line',\r\n                    // data: [5, 20, 36, 10, 10, 20]\r\n                    data: sales\r\n                },\r\n                {\r\n                    name: '库存',\r\n                    type: 'line',\r\n                    // data: [6, 10, 25, 20, 15, 10]\r\n                    data: stores\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { sales, stores } = this.state\r\n\r\n        return (\r\n            <div>\r\n                <Card>\r\n                    <Button type='primary' onClick={this.update}>更新</Button>\r\n                </Card>\r\n\r\n                <Card title='折线图一'>\r\n                    <ReactEcharts option={this.getOption(sales, stores)} style={{paddingTop:40, height:500}}/>\r\n                </Card>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","/**\r\n * 后台管理的饼图路由组件\r\n */\r\nimport React, {Component} from 'react'\r\nimport {Card} from 'antd'\r\nimport ReactEcharts from 'echarts-for-react'\r\n\r\nexport default class Pie extends Component {\r\n\r\n    getOption = () => {\r\n        return {\r\n            title : {\r\n                text: '某站点用户访问来源',\r\n                subtext: '纯属虚构',\r\n                x:'center'\r\n            },\r\n            tooltip : {\r\n                trigger: 'item',\r\n                formatter: \"{a} <br/>{b} : {c} ({d}%)\"\r\n            },\r\n            legend: {\r\n                orient: 'vertical',\r\n                left: 'left',\r\n                data: ['直接访问','邮件营销','联盟广告','视频广告','搜索引擎']\r\n            },\r\n            series : [\r\n                {\r\n                    name: '访问来源',\r\n                    type: 'pie',\r\n                    radius : '55%',\r\n                    center: ['50%', '60%'],\r\n                    data:[\r\n                        {value:335, name:'直接访问'},\r\n                        {value:310, name:'邮件营销'},\r\n                        {value:234, name:'联盟广告'},\r\n                        {value:135, name:'视频广告'},\r\n                        {value:1548, name:'搜索引擎'}\r\n                    ],\r\n                    itemStyle: {\r\n                        emphasis: {\r\n                            shadowBlur: 10,\r\n                            shadowOffsetX: 0,\r\n                            shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n                        }\r\n                    }\r\n                }\r\n            ]\r\n        };\r\n\r\n    }\r\n\r\n    getOption2 = () => {\r\n        return {\r\n            backgroundColor: '#2c343c',\r\n\r\n            title: {\r\n                text: 'Customized Pie',\r\n                left: 'center',\r\n                top: 20,\r\n                textStyle: {\r\n                    color: '#ccc'\r\n                }\r\n            },\r\n\r\n            tooltip : {\r\n                trigger: 'item',\r\n                formatter: \"{a} <br/>{b} : {c} ({d}%)\"\r\n            },\r\n\r\n            visualMap: {\r\n                show: false,\r\n                min: 80,\r\n                max: 600,\r\n                inRange: {\r\n                    colorLightness: [0, 1]\r\n                }\r\n            },\r\n            series : [\r\n                {\r\n                    name:'访问来源',\r\n                    type:'pie',\r\n                    radius : '55%',\r\n                    center: ['50%', '50%'],\r\n                    data:[\r\n                        {value:335, name:'直接访问'},\r\n                        {value:310, name:'邮件营销'},\r\n                        {value:274, name:'联盟广告'},\r\n                        {value:235, name:'视频广告'},\r\n                        {value:400, name:'搜索引擎'}\r\n                    ].sort(function (a, b) { return a.value - b.value; }),\r\n                    roseType: 'radius',\r\n                    label: {\r\n                        normal: {\r\n                            textStyle: {\r\n                                color: 'rgba(255, 255, 255, 0.3)'\r\n                            }\r\n                        }\r\n                    },\r\n                    labelLine: {\r\n                        normal: {\r\n                            lineStyle: {\r\n                                color: 'rgba(255, 255, 255, 0.3)'\r\n                            },\r\n                            smooth: 0.2,\r\n                            length: 10,\r\n                            length2: 20\r\n                        }\r\n                    },\r\n                    itemStyle: {\r\n                        normal: {\r\n                            color: '#c23531',\r\n                            shadowBlur: 200,\r\n                            shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n                        }\r\n                    },\r\n\r\n                    animationType: 'scale',\r\n                    animationEasing: 'elasticOut',\r\n                    animationDelay: function (idx) {\r\n                        return Math.random() * 200;\r\n                    }\r\n                }\r\n            ]\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Card title='饼图一'>\r\n                    <ReactEcharts option={this.getOption()} style={{height: 300}}/>\r\n                </Card>\r\n                <Card title='饼图二'>\r\n                    <ReactEcharts option={this.getOption2()} style={{height: 300}}/>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","/**\r\n * 订单管理\r\n */\r\nimport React from 'react'\r\nimport './order.less'\r\n\r\nexport default function Order(props) {\r\n  return (\r\n    <div className=\"order\">\r\n      正在开发中.....\r\n    </div>\r\n  )\r\n}\r\n","/**\r\n * 前台404页面\r\n */\r\nimport React, {Component} from 'react'\r\nimport {Button, Row, Col} from 'antd'\r\nimport './not-found.less'\r\n\r\nexport default class NotFound extends Component {\r\n    goHome = ()=>{\r\n        this.props.history.replace('/home')\r\n    }\r\n    render() {\r\n        return (\r\n            <Row className='not-found'>\r\n                <Col span={12} className='left'></Col>\r\n                <Col span={12} className='right'>\r\n                    <h1>404</h1>\r\n                    <h2>抱歉，你访问的页面不存在</h2>\r\n                    <div>\r\n                        <Button type='primary' onClick={this.goHome}>\r\n                            回到首页\r\n                        </Button>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n","/**\r\n * 后台管理的路由组件\r\n */\r\nimport React, {Component} from 'react'\r\nimport { Redirect, Switch, Route } from 'react-router-dom'\r\nimport { Layout } from 'antd'\r\nimport LeftNav from '../../components/left-nav'\r\nimport Header from '../../components/header'\r\nimport memoryUtils from '../../utils/memoryUtils'\r\nimport Home from './pages/home/home'\r\nimport Category from './pages/category/category'\r\nimport Product from './pages/product/product'\r\nimport Role from './pages/role/role'\r\nimport User from './pages/user/user'\r\nimport Bar from './pages/charts/bar'\r\nimport Line from './pages/charts/line'\r\nimport Pie from './pages/charts/pie'\r\nimport Order from './pages/order/order'\r\nimport NotFound from './pages/not-found/not-found'\r\n\r\nconst { Footer, Sider, Content } = Layout\r\n\r\n\r\nexport default class Admin extends Component {\r\n    render() {\r\n        const user = memoryUtils.user\r\n        if(!user || !user._id) {  // 如果内存没有存储user ==> 当前没有登陆\r\n            return <Redirect to='/login' />   // 自动跳转到登陆(在render()中)\r\n        }\r\n\r\n        return (\r\n            <Layout style={{minHeight: '100%'}}>\r\n                <Sider>\r\n                    <LeftNav />\r\n                </Sider>\r\n                <Layout>\r\n                    <Header>Header</Header>\r\n                    <Content style={{margin: 20, backgroundColor:'#fff'}}>\r\n                       <Switch>\r\n                           <Redirect exact from='/' to='/home'/>\r\n                           <Route path='/home' component={Home}></Route>\r\n                           <Route path='/category' component={Category}/>\r\n                           <Route path='/product' component={Product}/>\r\n                           <Route path='/user' component={User}/>\r\n                           <Route path='/role' component={Role}/>\r\n                           <Route path=\"/charts/bar\" component={Bar}/>\r\n                           <Route path=\"/charts/pie\" component={Pie}/>\r\n                           <Route path=\"/charts/line\" component={Line}/>\r\n                           <Route path=\"/order\" component={Order}/>\r\n                           <Route component={NotFound}/>  {/*上面没有一个匹配, 直接显示*/}\r\n                       </Switch>\r\n                    </Content>\r\n                    <Footer style={{textAlign: 'center', color: '#ccc'}}>推荐使用谷歌浏览器，可以获得更佳页面操作体验</Footer>\r\n                </Layout>\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n","/**\n * 应用的根组件\n */\nimport React, { Component } from 'react'\n// import { Button, message } from 'antd'\n// import {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom'\nimport Login from './pages/login/login'\nimport Admin from './pages/admin/admin'\n\nexport default class App extends Component {\n  /*handleClick = ()=>{\n      message.success('This is a success message');\n  }*/\n\n  render() {\n    return (\n      /*<div>\n         <Button type=\"primary\" onClick={this.handleClick}>Primary</Button>\n      </div>*/\n      <Router>\n        <Switch> {/*只匹配其中一个*/}\n          <Route path='/login' component={Login}></Route>\n          <Route path='/' component={Admin}></Route>\n        </Switch>\n      </Router>\n\n    )\n  }\n}\n\n\n\n/*function App() {\n  return (\n    <div className=\"App\">\n\n    </div>\n  );\n}\nexport default App;\n*/\n","/**\n * 入口js文件\n */\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n// import 'antd/dist/antd.css'  // 会导入antd的所有样式,没有起到按需导入\n\nimport App from './App'\nimport storageUtils from './utils/storageUtils'\nimport memoryUtils from './utils/memoryUtils'\n\n// 读取local中保存user, 保存到内存中\nconst user = storageUtils.getUser()\nmemoryUtils.user = user\n\n// 将App组件标签渲染到index页面的div上\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}